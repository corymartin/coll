{"google":"UA-33072659-1","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"Installation\r\n============\r\nInstall with NPM:\r\n\r\n```\r\n$ npm install coll\r\n```\r\n\r\nIn your JavaScript:\r\n\r\n```js\r\nvar coll = require('coll');\r\n```\r\n\r\nThe Classes\r\n===========\r\n\r\n- __[List]__\r\n  - *List Creation*\r\n  - [List Constructor]\r\n  - [List.range]\r\n  - *Properties*\r\n  - [List#length]\r\n  - *Accessor Functions*\r\n  - [List#get]\r\n  - [List#slice]\r\n  - [List#first]\r\n  - [List#last]\r\n  - [List#min]\r\n  - [List#max]\r\n  - *Mutator Functions*\r\n  - [List#set]\r\n  - [List#add]\r\n  - [List#addRange]\r\n  - [List#insert]\r\n  - [List#insertRange]\r\n  - [List#remove]\r\n  - [List#removeFirst]\r\n  - [List#removeLast]\r\n  - [List#removeIf]\r\n  - [List#removeAll]\r\n  - [List#removeAt]\r\n  - [List#clear]\r\n  - *Search Functions*\r\n  - [List#find]\r\n  - [List#findLast]\r\n  - [List#findAll]\r\n  - [List#contains]\r\n  - [List#count]\r\n  - [List#countIf]\r\n  - [List#filter]\r\n  - [List#reject]\r\n  - *Transformation Functions*\r\n  - [List#sort]\r\n  - [List#reverse]\r\n  - [List#concat]\r\n  - [List#map]\r\n  - [List#intersperse]\r\n  - [List#join]\r\n  - [List#unique]\r\n  - [List#clean]\r\n  - [List#clone]\r\n  - [List#toArray]\r\n  - *Sub-List Functions*\r\n  - [List#take]\r\n  - [List#takeWhile]\r\n  - [List#drop]\r\n  - [List#dropWhile]\r\n  - [List#group]\r\n  - [List#partition]\r\n  - [List#intersect]\r\n  - [List#difference]\r\n  - [List#union]\r\n  - *Zipping Functions*\r\n  - [List#zip]\r\n  - *Indexing Functions*\r\n  - [List#indexOf]\r\n  - [List#lastIndexOf]\r\n  - [List#indexIf]\r\n  - [List#lastIndexIf]\r\n  - [List#indicesOf]\r\n  - [List#indicesIf]\r\n  - *Iteration Functions*\r\n  - [List#forEach]\r\n  - [List#some]\r\n  - [List#every]\r\n  - [List#reduce]\r\n  - [List#reduceRight]\r\n- __[Dict]__\r\n  - *Dict Creation*\r\n  - [Dict Constructor]\r\n  - *Properties*\r\n  - [Dict#length]\r\n  - [Dict#keys]\r\n  - [Dict#values]\r\n  - *Accessor Functions*\r\n  - [Dict#hasKey]\r\n  - [Dict#get]\r\n  - *Mutator Functions*\r\n  - [Dict#set]\r\n  - [Dict#add]\r\n  - [Dict#remove]\r\n  - [Dict#clear]\r\n  - *Iteration Functions*\r\n  - [Dict#forEach]\r\n  - [Dict#some]\r\n  - [Dict#every]\r\n  - *Search Functions*\r\n  - [Dict#filter]\r\n  - [Dict#reject]\r\n  - *Transformation Functions*\r\n  - [Dict#clone]\r\n  - [Dict#fill]\r\n  - [Dict#toLiteral]\r\n  - [Dict#toArray]\r\n- __[Map]__\r\n  - *Map Creation*\r\n  - [Map Constructor]\r\n  - *Properties*\r\n  - [Map#length]\r\n  - [Map#keys]\r\n  - [Map#values]\r\n  - *Accessor Functions*\r\n  - [Map#hasKey]\r\n  - [Map#get]\r\n  - *Mutator Functions*\r\n  - [Map#set]\r\n  - [Map#remove]\r\n  - [Map#clear]\r\n  - *Iteration Functions*\r\n  - [Map#forEach]\r\n  - [Map#some]\r\n  - [Map#every]\r\n  - *Search Functions*\r\n  - [Map#filter]\r\n  - [Map#reject]\r\n  - *Transformation Functions*\r\n  - [Map#clone]\r\n  - [Map#fill]\r\n  - [Map#toLiteral]\r\n  - [Map#toArray]\r\n\r\n\r\n\r\n<a name='list'></a>\r\nList\r\n====\r\nAn indexed list of items with functions for manipulating, iterating,\r\nsearching, indexing, and transforming.\r\n\r\n\r\n<a name='list-constructor'></a>\r\nList Constructor\r\n----------------\r\n`new` is optional\r\n\r\n```js\r\nvar ls1 = new coll.List;\r\nvar ls2 = coll.List();\r\n\r\nls1 instanceof coll.List; // true\r\nls2 instanceof coll.List; // true\r\n```\r\n\r\nAccepts any *iterable* item to initially populate the list.\r\nAn iterable is most anything with indexes and a length property\r\nthat can be iterated over.\r\n\r\n```js\r\nvar ls1 = coll.List([2, 4, 6]);\r\n// ls1 => [2, 4, 5]\r\n\r\nvar ls2 = coll.List('abc');\r\n// ls2 => ['a', 'b', 'c']\r\n\r\nvar ls3 = coll.List(coll.List([true, 2.99]))\r\n// ls3 => [true, 2.99]\r\n\r\n;(function() {\r\n  var argls = coll.List(arguments);\r\n  // argls => ['hi', true, /foo/]\r\n})('hi', true, /foo/);\r\n```\r\n\r\n\r\nList Functions\r\n--------------\r\n\r\n<a name='list_range'></a>\r\n### List.range( start [, end [, step]] )\r\nReturns a `List` of numbers from `start` up to and including `end`.\r\nIf only `start` is passed, a list of numbers ranging from `0` through\r\n`start` will be returned. If the optional `step` parameter is passed,\r\nthat will be used as the incrementing value. The default increment is `1`.\r\n\r\n```js\r\nvar ls = coll.List.range(-4, 4);\r\n// ls => [-4, -3, -2, -1, 0, 1, 2, 3, 4]\r\n```\r\n```js\r\nvar ls = coll.List.range(3);\r\n// ls => [0, 1, 2, 3]\r\n```\r\n```js\r\nvar ls = coll.List.range(8, 18, 2);\r\n// ls => [8, 10, 12, 14, 16, 18]\r\n```\r\n\r\n\r\nList Instance Properties\r\n------------------------\r\n\r\n<a name='list-length'></a>\r\n### List#length\r\nNumber of items in the list.\r\n\r\n```js\r\nvar ls = coll.List([2,4,6]);\r\n// ls.length => 3\r\n```\r\n\r\nList Instance Functions\r\n-----------------------\r\n\r\n<a name='list-get'></a>\r\n### List#get( index [, \\_default] )\r\nReturns the item at the specifed index.\r\nIf the index is not present within the list, a `RangeError` is thrown.\r\nIf the optional `_default` value is passed, that will be returned when\r\nthe index is not present.\r\n\r\n```js\r\nvar ls = coll.List(['apple', 'orange', 'pear', 'grape']);\r\nvar x = ls.get(2);\r\n// x => 'pear'\r\n\r\nls.get(37); // throws RangeError\r\n\r\nx = ls.get(37, 'mango');\r\n// x => 'mango'\r\n```\r\n\r\n<a name='list-slice'></a>\r\n### List#slice( [beginindex [, endindex]] )\r\nReturns a section of the list.\r\nFunctions the same as `Array#slice` except this version returns\r\nan instance of `List`.\r\n\r\n```js\r\nvar ls = coll.List('abcde');\r\nvar x = ls.slice(2, 4);\r\n// x  => ['c', 'd']\r\n// ls => ['a', 'b', 'c', 'd', 'e']\r\n```\r\n\r\n<a name='list-first'></a>\r\n### List#first( [\\_default] )\r\nReturns the first item in the list.\r\nIf the list is empty, `undefined` is returned.\r\nIf an optional `_default` value is passed, that will be returned in the\r\ncase of an empty list.\r\n\r\n```js\r\nvar ls = coll.List(['apple', 'orange', 'pear', 'grape']);\r\nvar x = ls.first();\r\n// x => 'apple'\r\n```\r\n```js\r\nvar ls = coll.List();\r\nvar x = ls.first();\r\n// x => undefined\r\n\r\nx = ls.first('foo');\r\n// x => 'foo'\r\n```\r\n\r\n<a name='list-last'></a>\r\n### List#last()\r\nReturns the last item in the list.\r\nIf the list is empty, `undefined` is returned.\r\nIf an optional `_default` value is passed, that will be returned in the\r\ncase of an empty list.\r\n\r\n```js\r\nvar ls = coll.List(['apple', 'orange', 'pear', 'grape']);\r\nvar x = ls.last();\r\n// x => 'grape'\r\n```\r\n```js\r\nvar ls = coll.List();\r\nvar x = ls.last();\r\n// x => undefined\r\n\r\nx = ls.last('bar');\r\n// x => 'bar'\r\n```\r\n\r\n<a name='list-min'></a>\r\n### List#min( [comparer] )\r\nReturns the item with the minimum value from the list.\r\n\r\nThe optional `comparer` parameter can be either a function or a string.\r\nIf it is a function, then it will be used to determine the minimum value.\r\n`comparer` functions work as they do in `Array#sort`.\r\n\r\nIf `comparer` is a string, then it will be assumed that the list is composed\r\nof objects and the value to be compared will be that of the\r\nproperty name passed.\r\n\r\n```js\r\nvar ls = coll.List([4,2,8,5]);\r\nvar x = ls.min();\r\n// x => 2\r\n```\r\n```js\r\n// With optional comparer function\r\nvar ls = coll.List(['aaa', 'bb', 'ccccccc', 'dddd']);\r\nvar x = ls.min(function(a, b) {\r\n  return a.length - b.length;\r\n});\r\n// x => 'bb'\r\n```\r\n```js\r\n// With optional comparer property name\r\nvar ls = coll.List([\r\n  {foo:34, bar:'erf'},\r\n  {foo:12, bar:'xcv'},\r\n  {foo:45, bar:'bhu'},\r\n  {foo:26, bar:'aer'}\r\n]);\r\nvar x = ls.min('bar');\r\n// x => {foo:26, bar:'aer'}\r\n```\r\n\r\n<a name='list-max'></a>\r\n### List#max( [comparer] )\r\nReturns the item with the maximum value from the list.\r\n\r\nThe optional `comparer` parameter can be either a function or a string.\r\nIf it is a function, then it will be used to determine the maximum value.\r\n`comparer` functions work as they do in `Array#sort`.\r\n\r\nIf `comparer` is a string, then it will be assumed that the list is composed\r\nof objects and the value to be compared will be that of the\r\nproperty name passed.\r\n\r\n```js\r\nvar ls = coll.List([4,2,8,5]);\r\nvar x = ls.max();\r\n// x => 8\r\n```\r\n```js\r\n// With optional comparer function\r\nvar ls = coll.List(['aaa', 'bb', 'ccccccc', 'dddd']);\r\nvar x = ls.max(function(a, b) {\r\n  return a.length - b.length;\r\n});\r\n// x => 'ccccccc'\r\n```\r\n```js\r\n// With optional comparer property name\r\nvar ls = coll.List([\r\n  {foo:34, bar:'erf'},\r\n  {foo:12, bar:'xcv'},\r\n  {foo:45, bar:'bhu'},\r\n  {foo:26, bar:'aer'}\r\n]);\r\nvar x = ls.max('bar');\r\n// x => {foo:12, bar:'xcv'}\r\n```\r\n\r\n<a name='list-set'></a>\r\n### List#set( index, obj )\r\nSet the list item at `index` to `obj`.\r\n\r\n```js\r\nvar ls = coll.List([1,2,3]);\r\nls.set(1, 99);\r\n// ls => [1, 99, 3]\r\n```\r\n\r\n<a name='list-add'></a>\r\n### List#add( item [, item*N*] )\r\nAppends one or more items to the end of the list.\r\nReturns the list instance.\r\n\r\n```js\r\nvar ls = coll.List('abc');\r\nls.add('d');\r\nls.add('e', 'f');\r\n// ls => ['a', 'b', 'c', 'd', 'e', 'f']\r\n```\r\n\r\n<a name='list-addrange'></a>\r\n### List#addRange( iterable )\r\nAppends a range of new items to the end of the list.\r\nReturns the list instance.\r\n\r\n```js\r\nvar ls = coll.List();\r\nls.addRange([2,4,6]);\r\nls.addRange('abc');\r\n// ls => [2, 4, 6, 'a', 'b', 'c']\r\n```\r\n\r\n<a name='list-insert'></a>\r\n### List#insert( index, item )\r\nInserts a new item at the specified index.\r\nReturns the list instance.\r\n\r\n```js\r\nvar ls = coll.List('abd');\r\nls.insert(2, 'c');\r\n// ls => ['a', 'b', 'c', 'd']\r\n```\r\n\r\n<a name='list-insertrange'></a>\r\n### List#insertRange( index, iterable )\r\nInserts a range of new items starting at the specifed index.\r\nReturns the list instance.\r\n\r\n```js\r\nvar ls = coll.List([10,20,30]);\r\nls.insertRange(1, [12,14]);\r\n// ls => [10, 12, 14, 20, 30]\r\n```\r\n\r\n<a name='list-remove'></a>\r\n### List#remove( item [, index] )\r\nRemoves the first occurence of the passed item in the list.\r\nReturns the removed item, or `undefined` if the item is not in the list.\r\nIf the optional `index` parameter is passed, the first matching item after\r\nthat index will be removed.\r\n\r\n```js\r\nvar ls = coll.List([1,4,2,6,2,3]);\r\nvar x = ls.remove(2);\r\n// x  => 2\r\n// ls => [1, 4, 6, 2, 3]\r\n```\r\n\r\n<a name='list-removefirst'></a>\r\n### List#removeFirst()\r\nRemoves and returns the first item in the list.\r\n\r\n```js\r\nvar ls = coll.List(['some', 'text', 'and', 'stuff']);\r\nvar x = ls.removeFirst();\r\n// x  => 'some'\r\n// ls => ['text', 'and', 'stuff']\r\n```\r\n\r\n<a name='list-removelast'></a>\r\n### List#removeLast()\r\nRemoves and returns the last item in the list.\r\n\r\n```js\r\nvar ls = coll.List(['some', 'text', 'and', 'stuff']);\r\nvar x = ls.removeLast();\r\n// x  => 'stuff'\r\n// ls => ['some', 'text', 'and']\r\n```\r\n\r\n<a name='list-removeif'></a>\r\n### List#removeIf( [context,] iterator )\r\nRemoves and returns the first item in the list to pass the `iterator` function.\r\nIf no item passes the `iterator` test, `undefined` is returned.\r\n\r\n```js\r\nvar ls = coll.List([2,4,6,7,8]);\r\nvar x = ls.removeIf(function(item, index, list) {\r\n  return item % 2 !== 0;\r\n});\r\n// x  => 7\r\n// ls => [2, 4, 6, 8]\r\n\r\n// With optional context\r\nvar obj = {foo:'bar'};\r\nls.removeIf(obj, function(item, index, list) {\r\n  // this => {foo:'bar'}\r\n});\r\n```\r\n\r\n<a name='list-removeall'></a>\r\n### List#removeAll( [context,] iterator )\r\nRemoves every item in the list that passes the `iterator` test.\r\nReturns a new `List` of the removed items.\r\n\r\n```js\r\nvar ls = coll.List([1,2,3,4,5,6,7,8]);\r\nvar x = ls.removeAll(function(item, index, list) {\r\n  return item % 2 === 0;\r\n});\r\n// x  => [2, 4, 6, 8]\r\n// ls => [1, 3, 5, 7]\r\n\r\n\r\n// With optional context\r\nvar obj = {foo:'bar'};\r\nls.removeAll(obj, function(item, index, list) {\r\n  // this => {foo:'bar'}\r\n});\r\n```\r\n\r\n<a name='list-removeat'></a>\r\n### List#removeAt( index [, howmany] )\r\nRemoves the item at the given index.\r\nReturns the removed item.\r\nIf the optional `howmany` parameter is passed, a range of items is removed\r\nstarting at the index. A new `List` of the removed items will then be returned.\r\n\r\n```js\r\nvar ls = coll.List('abcdef');\r\nvar x = removeAt(2);\r\n// x  => 'c'\r\n// ls => ['a', 'b', 'd' 'e', 'f']\r\n```\r\n```js\r\n// With `howmany` parameter\r\nvar ls = coll.List('abcdef');\r\nvar x = removeAt(2, 3);\r\n// x  => ['c', 'd', 'e']\r\n// ls => ['a', 'b', 'f']\r\n```\r\n\r\n<a name='list-clear'></a>\r\n### List#clear()\r\nRemoves all items from the list. Returns the instance.\r\n\r\n```js\r\nvar ls = coll.List([1,2,3]);\r\nvar x = ls.clear();\r\n// ls => []\r\nx === ls; // true\r\n```\r\n\r\n<a name='list-find'></a>\r\n### List#find( [context,] iterator )\r\nReturns the first item in the list to pass the `iterator` test.\r\nIf no item passes the `iterator` test, `undefined` is returned.\r\n\r\n```js\r\nvar ls = coll.List(23, '45', Date.now(), 'foo', 99.99, 'bar']);\r\nvar x = ls.find(function(item, index, list) {\r\n  return isNaN(item);\r\n});\r\n// x => 'foo'\r\n\r\n// With optional context\r\nvar obj = {foo:'bar'};\r\nls.find(obj, function(item, index, list) {\r\n  // this => {foo:'bar'}\r\n});\r\n```\r\n\r\n<a name='list-findLast'></a>\r\n### List#findLast( [context,] iterator )\r\nReturns the last item in the list that passes the `iterator` test.\r\nIf no item passes the `iterator` test, `undefined` is returned.\r\n\r\n```js\r\nvar ls = coll.List(['aa', 'bb', 'cccccccc', 'dd', 'eeeeee']);\r\nvar x = ls.findLast(function(item, index, list) {\r\n  return item.length < 3;\r\n});\r\n// x => 'dd'\r\n\r\n// With optional context\r\nvar obj = {foo:'bar'};\r\nls.findLast(obj, function(item, index, list) {\r\n  // this => {foo:'bar'}\r\n});\r\n```\r\n\r\n<a name='list-findall'></a>\r\n### List#findAll( [context,] iterator )\r\nReturns a new `List` of every item in the instance list that passes the\r\n`iterator` test.\r\n\r\n```js\r\nvar ls = coll.List(['aa', 'bb', 'cccccccc', 'dd', 'eeeeee']);\r\nvar x = ls.findAll(function(item, index, list) {\r\n  return item.length < 3;\r\n});\r\n// x => ['aa', 'bb', 'dd']\r\n\r\n// With optional context\r\nvar obj = {foo:'bar'};\r\nls.findAll(obj, function(item, index, list) {\r\n  // this => {foo:'bar'}\r\n```\r\n\r\n<a name='list-contains'></a>\r\n### List#contains( item )\r\nDetermines if the passed item is in the list.\r\n\r\n```js\r\nvar ls = coll.List(['top', 'bottom', 'left']);\r\nls.contains('left');  // true\r\nls.contains('right'); // false\r\n```\r\n\r\n<a name='list-count'></a>\r\n### List#count( [item] )\r\nReturns the number of occurences of `item` within the list.\r\nIf no argument is passed, the list's length is returned.\r\n\r\n```js\r\nvar ls = coll.List([2,4,2,7,2,8]);\r\nvar x = ls.count(2);\r\n// x => 3\r\n```\r\n\r\n<a name='list-countif'></a>\r\n### List#countIf( [context,] iterator )\r\nReturns the number of occurences that the `iterator` tests successfully against\r\nthe items in the list.\r\n\r\n```js\r\nvar ls = coll.List([1,2,3,4,5,6,7,8,9]);\r\nvar x = ls.countIf(function(item, index, list) {\r\n  return item % 2 === 0;\r\n});\r\n// x => 4\r\n\r\n// With optional context\r\nvar obj = {foo:'bar'};\r\nls.countIf(obj, function(item, index, list) {\r\n  // this => {foo:'bar'}\r\n});\r\n```\r\n\r\n<a name='list-filter'></a>\r\n### List#filter( [context,] iterator )\r\nReturns a new `List` composed of items that pass the `iterator` function.\r\n\r\n```js\r\nvar ls = coll.List([\r\n  {name:'Jay'}, {name:'Joan'}, {name:'Bob'}, {name:'Flo'}, {name:'Jim'}\r\n]);\r\nvar x = ls.filter(function(item, index, list) {\r\n  return item.name[0] === 'J';\r\n});\r\n// x => [\r\n//  {name:'Jay'}, {name:'Joan'}, {name:'Jim'}\r\n// ]\r\n\r\n// With optional context\r\nvar obj = {foo:'bar'};\r\nls.filter(obj, function(item, index, list) {\r\n  // this => {foo:'bar'}\r\n});\r\n```\r\n\r\n<a name='list-reject'></a>\r\n### List#reject( [context,] iterator )\r\nReturns a new `List` composed of items that fail the `iterator` function.\r\n\r\n```js\r\nvar ls = coll.List([\r\n  {name:'Jay'}, {name:'Joan'}, {name:'Bob'}, {name:'Flo'}, {name:'Jim'}\r\n]);\r\nvar x = ls.reject(function(item, index, list) {\r\n  return item.name[0] === 'J';\r\n});\r\n// x => [\r\n//  {name:'Bob'}, {name:'Flo'}\r\n// ]\r\n\r\n// With optional context\r\nvar obj = {foo:'bar'};\r\nls.reject(obj, function(item, index, list) {\r\n  // this => {foo:'bar'}\r\n});\r\n```\r\n\r\n<a name='list-sort'></a>\r\n### List#sort( [comparer] )\r\nReturns a new, sorted `List` of the instance's items.\r\nNumeric items (numbers, dates, booleans) are sorted numerically.\r\nOther types are sorted lexicographically.\r\n\r\nIf a list contains mixed types, the order of sort precedence is:\r\n\r\n1. number literals\r\n2. string literals\r\n3. boolean literals\r\n4. date objects\r\n5. number objects\r\n6. string objects\r\n7. boolean objects\r\n8. regexes\r\n9. functions\r\n10. objects\r\n11. arrays\r\n12. global properties (`NaN`, `Infinity`, `undefined`, `null`)\r\n\r\nThe optional `comparer` parameter can be either a function or a string.\r\nIf it is a function, then it will be used to determine sort order.\r\n`comparer` functions work as they do in `Array#sort`.\r\n\r\nIf `comparer` is a string, then it will be assumed that the list is composed\r\nof objects and they will be sorted by the property name passed.\r\n\r\n```js\r\nvar ls = coll.List([33, 4, 77, 5, 2, 8]);\r\nvar x = ls.sort();\r\n// x  => [2, 4, 5, 8, 33, 77]\r\n```\r\n```js\r\n// Mixed types\r\nvar date1 = new Date('2012-06-23')\r\nvar date2 = new Date('2000-01-01')\r\nvar ls = coll.List(\r\n  [9, 'a', /foo/, true, 0, date1, {a:1}, 'sd', date2, 5, false, '1']\r\n);\r\nvar x = ls.sort();\r\n// x =>\r\n//  [0, 5, 9, '1', 'a', 'sd', false, true, date2, date1 /foo/, {a:1}]\r\n```\r\n```js\r\n// With optional comparer function\r\nvar ls = coll.List([33, 4, 77, 5, 2, 8]);\r\nvar x = ls.sort(function(a, b) {\r\n  return b - a;\r\n});\r\n// x  => [77, 33, 8, 5, 4, 2]\r\n```\r\n```js\r\n// With optional comparer property name\r\nvar ls = coll.List([\r\n  {foo:34, bar:'erf'},\r\n  {foo:12, bar:'xcv'},\r\n  {foo:45, bar:'bhu'},\r\n  {foo:26, bar:'aer'}\r\n]);\r\nvar x = ls.sort('bar');\r\n// x => [\r\n//  {foo:26, bar:'aer'},\r\n//  {foo:45, bar:'bhu'},\r\n//  {foo:34, bar:'erf'},\r\n//  {foo:12, bar:'xcv'}\r\n// ]\r\n```\r\n\r\n<a name='list-reverse'></a>\r\n### List#reverse()\r\nReturns a new `List` of the instance's items with their order reversed.\r\n\r\n```js\r\nvar ls = coll.List('abc');\r\nvar x = ls.reverse();\r\n// x  => ['c', 'b', 'a']\r\n// ls => ['a', 'b', 'c']\r\n```\r\n\r\n<a name='list-concat'></a>\r\n### List#concat( iterable [, iterable*N*] )\r\nReturns a new `List` composed of the instance list concatenated to one or more\r\npassed iterables.\r\n\r\n```js\r\nvar ls = coll.List([2, true]);\r\nvar x = ls.concat('abc', coll.List([0,1,2]), [12.99]);\r\n// x  => [2, true, 'a', 'b', 'c', 0, 1, 2, 12.99]\r\n// ls => [2, true]\r\n```\r\n\r\n<a name='list-map'></a>\r\n### List#map( [context,] iterator )\r\nReturns a new `List` of values determined by the `iterator` function.\r\n\r\n```js\r\nvar ls = coll.List([\r\n  {name:'Jay'}, {name:'Joan'}, {name:'Bob'}, {name:'Flo'}, {name:'Jim'}\r\n]);\r\nvar x = ls.map(function(item, index, list) {\r\n  return 'User ' + item.name;\r\n});\r\n// x => [\r\n//  'User Jay', 'User Joan', 'User Bob', 'User Flo', 'User Jim'\r\n// ]\r\n\r\n// With optional context\r\nvar obj = {foo:'bar'};\r\nls.map(obj, function(item, index, list) {\r\n  // this => {foo:'bar'}\r\n});\r\n```\r\n\r\n<a name='list-intersperse'></a>\r\n### List#intersperse( obj )\r\nReturns a new `List` with `obj` inserted between every item in the list.\r\n\r\n```js\r\nvar ls = coll.List([1,2,3,4,5]);\r\nvar x = ls.intersperse('|');\r\n// x => [\r\n//  1, '|', 2, '|', 3, '|', 4, '|', 5\r\n// ]\r\n```\r\n\r\n<a name='list-join'></a>\r\n### List#join( [separator] )\r\nBorrowed from `Array#join`.\r\n\r\n```js\r\nvar ls = coll.List([2, 4, 6]);\r\nvar x = ls.join();\r\n// x => '2,4,6'\r\n\r\nx = ls.join(' - ');\r\n// x => '2 - 4 - 6'\r\n```\r\n\r\n<a name='list-unique'></a>\r\n### List#unique()\r\nReturns a new `List` of non-duplicate items found within the instance list.\r\nDuplicates are determines with strict equality.\r\n\r\n```js\r\nvar ls = coll.List('abcddcba');\r\nvar x = ls.unique();\r\n// x => ['a', 'b', 'c', 'd']\r\n```\r\n\r\n<a name='list-clean'></a>\r\n### List#clean()\r\nReturns a copy of the list with all occurences of `undefined`, `null`, and\r\n`NaN` removed.\r\n\r\n```js\r\nvar ls = coll.List(['a', null, 0, false, undefined, +'foo', 'bar']);\r\nvar x = ls.clean();\r\n// x => ['a', 0, false, 'bar']\r\n```\r\n\r\n<a name='list-clone'></a>\r\n### List#clone()\r\nReturns a copy of the list in a new instance.\r\n\r\n```js\r\nvar ls = coll.List([2,4]);\r\nvar x = ls.clone();\r\n// x  => [2, 4]\r\n// ls => [2, 4]\r\nx instanceof coll.List; // true\r\nx === ls;               // false\r\n```\r\n\r\n<a name='list-toarray'></a>\r\n### List#toArray()\r\nReturns a copy of the list's items in an `Array`.\r\n\r\n```js\r\nvar ls = coll.List([true, 'fajita', 4.89]);\r\nvar x = ls.toArray();\r\n// x => [true, 'fajita', 4.89]\r\nArray.isArray(x); // true;\r\n```\r\n\r\n<a name='list-take'></a>\r\n### List#take( howmany )\r\nReturns a new `List` of the first `howmany` contiguous items from the\r\ninstance list.\r\n\r\n```js\r\nvar ls = coll.List('abcdefg');\r\nvar x = ls.take(3);\r\n// x => ['a', 'b', 'c']\r\n```\r\n\r\n<a name='list-takewhile'></a>\r\n### List#takeWhile( [context,] iterator )\r\nReturns a new `List` of contiguous items, starting at the beginning of the\r\nlist, so long as the `iterator` function returns true.\r\n\r\n```js\r\nvar ls = coll.List([4,2,6,3,8,4,2,6]);\r\nvar x = ls.takeWhile(function(item, index, list) {\r\n  return item < 8;\r\n});\r\n// x => [4, 2, 6, 3]\r\n\r\n// With optional context\r\nvar obj = {foo:'bar'};\r\nls.takeWhile(obj, function(item, index, list) {\r\n  // this => {foo:'bar'}\r\n});\r\n```\r\n\r\n<a name='list-drop'></a>\r\n### List#drop( howmany )\r\nReturns a new `List` of contiguous items, dropping the first `howmany` items\r\nfrom the instance list.\r\n\r\n```js\r\nvar ls = coll.List('abcdefg');\r\nvar x = ls.drop(3);\r\n// x => ['d', 'e', 'f', 'g']\r\n```\r\n\r\n<a name='list-dropwhile'></a>\r\n### List#dropWhile( [context,] iterator )\r\nReturns a new `List` of contiguous items, starting at the first item in the\r\ninstance list that fails the passed `iterator` function.\r\n\r\n```js\r\nvar ls = coll.List([4,2,6,3,8,4,2,6]);\r\nvar x = ls.dropWhile(function(item, index, list) {\r\n  return item < 8;\r\n});\r\n// x => [8, 4, 2, 6]\r\n\r\n// With optional context\r\nvar obj = {foo:'bar'};\r\nls.dropWhile(obj, function(item, index, list) {\r\n  // this => {foo:'bar'}\r\n});\r\n```\r\n\r\n<a name='list-group'></a>\r\n### List#group( [[context,] iterator] )\r\nReturns a hash of sublists, grouped either by equality to each other or by\r\nthe result of the optional `iterator` function.\r\n\r\n```js\r\nvar ls = coll.List([2,3,1,2,2,3]);\r\nvar x = ls.group();\r\n// x => {\r\n//  '1' : [1],\r\n//  '2' : [2, 2, 2],\r\n//  '3' : [3, 3]\r\n// }\r\n```\r\n```js\r\n// With optional iterator function\r\nvar ls = coll.List(['#fff', '#3366ee', 'magenta', '#ccc', 'red'])\r\nvar hexColorRegex = /^#[abcdef0-9]{3,6}$/i;\r\nvar x = ls.group(function(item, index, list) {\r\n  return hexColorRegex.test(item)\r\n    ? 'hex'\r\n    : 'named';\r\n});\r\n// x => {\r\n//  hex   : ['#fff', '#3366ee', '#ccc'],\r\n//  named : ['magenta', 'red']\r\n// }\r\n```\r\n\r\n<a name='list-partition'></a>\r\n### List#partition( [context,] iterator )\r\nReturns an `Array` of two `List`s. The first list is composed of the items\r\nthat pass the `iterator` function. The second list is composed of those items\r\nthat failed it.\r\n\r\n```js\r\nvar ls = coll.List([2,4,8,3,6,3,9,0,7]);\r\nvar x = ls.partition(function(item, index, list) {\r\n  return item < 5;\r\n});\r\n// x => [\r\n//  [2, 4, 3, 3, 0],\r\n//  [8, 6, 9, 7]\r\n// ]\r\nArray.isArray(x);     // true\r\nx[0] instanceof coll.List; // true\r\nx[1] instanceof coll.List; // true\r\n\r\n// With optional context\r\nvar obj = {foo:'bar'};\r\nls.partition(obj, function(item, index, list) {\r\n  // this => {foo:'bar'}\r\n});\r\n```\r\n\r\n<a name='list-intersect'></a>\r\n### List#intersect( iterable )\r\nReturns a new `List` of items present in both the instance list and in the\r\npassed iterable.\r\n\r\n```js\r\nvar ls = coll.List(['apple', 'orange', 'pear', 'grape']);\r\nvar x = ls.intersect(['peach', 'pear', 'plum', 'apple', 'mango']);\r\n// x => ['apple', 'pear']\r\n```\r\n\r\n<a name='list-difference'></a>\r\n### List#difference( iterable )\r\nReturns a new list composed of the list values not present in\r\nthe passed iterable.\r\n\r\n```js\r\nvar ls = coll.List(['apple', 'orange', 'pear', 'grape']);\r\nvar x = ls.difference(['peach', 'pear', 'plum', 'apple', 'mango']);\r\n// x => ['orange', 'grape']\r\n```\r\n\r\n<a name='list-union'></a>\r\n### List#union( iterable )\r\nReturns a new `List` representing the union of the list and in the\r\npassed iterable. That is, the combined unique items between the two.\r\n\r\n```js\r\nvar ls = coll.List(['apple', 'orange', 'pear', 'grape']);\r\nvar x = ls.union(['peach', 'pear', 'plum', 'apple', 'mango']);\r\n// x => ['apple', 'orange', 'pear', 'grape', 'peach', 'plum', 'mango']\r\n```\r\n\r\n<a name='list-zip'></a>\r\n### List#zip( iterable [, iterable*N*] )\r\nReturns a new `List` of `List`s by merging values of the instance list\r\nwith the passed iterables at their corresponding indices.\r\n\r\nIf passed iterables are shorter than instance list, `undefined` will\r\nbe used for missing values. If passed iterables are longer than the\r\ninstance list, values will be trimmed.\r\n\r\n```js\r\nvar ls = coll.List(['alpha', 'bravo', 'charlie']);\r\nvar x = ls.zip([2, 4, 6]);\r\n// x => [\r\n//   ['alpha',   2],\r\n//   ['bravo',   4],\r\n//   ['charlie', 6]\r\n// ]\r\n```\r\n\r\n```js\r\n// With a shorter iterable passed.\r\nvar ls = coll.List(['alpha', 'bravo', 'charlie']);\r\nvar x = ls.zip([1,2], 'abc');\r\n// x => [\r\n//   ['alpha',   1,         'a'],\r\n//   ['bravo',   2,         'b'],\r\n//   ['charlie', undefined, 'c']\r\n// ]\r\n```\r\n\r\n```js\r\n// With a longer iterable passed.\r\nvar ls = coll.List(['alpha', 'bravo', 'charlie']);\r\nvar x = ls.zip([1,2,3,4,5,6], 'abcdefghij');\r\n// x => [\r\n//   ['alpha',   1, 'a'],\r\n//   ['bravo',   2, 'b'],\r\n//   ['charlie', 3, 'c']\r\n// ]\r\n```\r\n\r\n<a name='list-indexof'></a>\r\n### List#indexOf( item [, index] )\r\nReturns the index of the first occurence of `item` in the list.\r\nIf `item` is not found, `-1` will be returned.\r\nBorrowed from `Array#indexOf`.\r\n\r\n```js\r\nvar ls = coll.List([1.99, 8.99, 3.99, 1.99, 7.99, 3.99, 1.99]);\r\nvar x = ls.indexOf(3.99);\r\n// x => 2\r\nx = ls.indexOf(9.99);\r\n// x => -1\r\n```\r\n\r\n<a name='list-lastindexof'></a>\r\n### List#lastIndexOf( item [, index] )\r\nReturns the index of the last occurence of `item` in the list.\r\nIf `item` is not found, `-1` will be returned.\r\nBorrowed from `Array#lastIndexOf`.\r\n\r\n```js\r\nvar ls = coll.List([1.99, 8.99, 3.99, 1.99, 7.99, 3.99, 1.99]);\r\nvar x = ls.lastIndexOf(3.99);\r\n// x => 5\r\nx = ls.lastIndexOf(9.99);\r\n// x => -1\r\n```\r\n\r\n<a name='list-indexif'></a>\r\n### List#indexIf( [index, [context,]] iterator )\r\nReturns the index of the first item in the list that passes the `iterator`\r\nfunction.\r\n\r\n```js\r\nvar ls = coll.List([\r\n  {name:'Leo'}, {name:'Jeb'}, {name:'Jojo'}, {name:'Flo'}, {name:'Jojo'}\r\n]);\r\nvar x = ls.indexIf(function(item, index, list) {\r\n  return item.name === 'Jojo';\r\n});\r\n// x => 2\r\n```\r\n```js\r\n// With optional start index\r\nvar ls = coll.List([2,3,6,4,7,4,6]);\r\nvar x = ls.indexIf(2, function(item, index, list) {\r\n  return item % 2 !== 0;\r\n});\r\n// x => 4\r\n```\r\n```js\r\n// With optional context\r\nvar obj = {foo:'bar'};\r\nls.indexIf(null, obj, function(item, index, list) {\r\n  // this => {foo:'bar'}\r\n});\r\n```\r\n\r\n<a name='list-lastindexif'></a>\r\n### List#lastIndexIf( [index, [context,]] iterator )\r\nReturns the index of the last item in the list that passes the `iterator`\r\nfunction.\r\n\r\n```js\r\nvar ls = coll.List([\r\n  {name:'Leo'}, {name:'Jeb'}, {name:'Jojo'}, {name:'Flo'}, {name:'Jojo'}\r\n]);\r\nvar x = ls.lastIndexIf(function(item, index, list) {\r\n  return item.name === 'Jojo';\r\n});\r\n// x => 4\r\n```\r\n```js\r\n// With optional start index\r\nvar ls = coll.List([2,3,6,4,7,4,6]);\r\nvar x = ls.lastIndexIf(3, function(item, index, list) {\r\n  return item % 2 !== 0;\r\n});\r\n// x => 1\r\n```\r\n```js\r\n// With optional context\r\nvar obj = {foo:'bar'};\r\nls.lastIndexIf(null, obj, function(item, index, list) {\r\n  // this => {foo:'bar'}\r\n});\r\n```\r\n\r\n<a name='list-indicesof'></a>\r\n### List#indicesOf( item [, index] )\r\nReturns the indices of every item in the list matching `item`.\r\n\r\n```js\r\nvar ls = coll.List('abcaegaatf');\r\nvar x = ls.indicesOf('a');\r\n// x => [0, 3, 6, 7]\r\n```\r\n```js\r\n// With optional index\r\nvar ls = coll.List('abcaegaatf');\r\nvar x = ls.indicesOf('a', 2);\r\n// x => [3, 6, 7]\r\n```\r\n\r\n<a name='list-indicesif'></a>\r\n### List#indicesIf( [index, [context,]] iterator )\r\nReturns the indices of every item in the list that passes the `iterator\r\nfunction.\r\n\r\n```js\r\nvar ls = coll.List([1,2,3,4,5,6,7]);\r\nvar x = ls.indicesIf(function(item, index, list) {\r\n  return item % 2 === 0;\r\n});\r\n// x => [1, 3, 5]\r\n```\r\n```js\r\n// With optional start index\r\nvar ls = coll.List([1,2,3,4,5,6,7]);\r\nvar x = ls.indicesIf(2, function(item, index, list) {\r\n  return item % 2 === 0;\r\n});\r\n// x => [3, 5]\r\n```\r\n```js\r\n// With optional context\r\nvar obj = {foo:'bar'};\r\nls.indicesIf(null, obj, function(item, index, list) {\r\n  // this => {foo:'bar'}\r\n});\r\n```\r\n\r\n<a name='list-foreach'></a>\r\n### List#forEach( [context,] iterator )\r\nIterates over the items in the list, invoking the passed `iterator` function\r\nfor each item. Returns the list instance.\r\n\r\n```js\r\nvar ls = coll.List(['Taco', 'Burrito', 'Fajita']);\r\nvar x = ls.forEach(function(item, index, list) {\r\n  console.log('%d : %s', index, item);\r\n});\r\n// Console output:\r\n//  0 : Taco\r\n//  1 : Burrito\r\n//  2 : Fajita\r\nx === ls; // true\r\n```\r\n```js\r\n// With optional context\r\nvar obj = {foo:'bar'};\r\nls.forEach(obj, function(item, index, list) {\r\n  // this => {foo:'bar'}\r\n});\r\n```\r\n\r\n<a name='list-some'></a>\r\n### List#some( [context,] iterator )\r\nReturns `true` if at least one item in the list passes the `iterator` function.\r\nOtherwise `false` is returned.\r\n\r\n```js\r\nvar ls = coll.List([2,4,6,9,10]);\r\nvar x = ls.some(function(item, index, list) {\r\n  return item % 2 !== 0;\r\n});\r\n// x => true\r\n\r\nx = ls.some(function(item, index, list) {\r\n  return item > 50;\r\n});\r\n// x => false\r\n```\r\n```js\r\n// With optional context\r\nvar obj = {foo:'bar'};\r\nls.some(obj, function(item, index, list) {\r\n  // this => {foo:'bar'}\r\n});\r\n```\r\n\r\n<a name='list-every'></a>\r\n### List#every( [context,] iterator )\r\nReturns `true` if every item in the list passes the `iterator` test.\r\nOtherwise `false` is returned.\r\n\r\n```js\r\nvar ls = coll.List([2,4,6,9,10]);\r\nvar x = ls.every(function(item, index, list) {\r\n  return item <= 10;\r\n});\r\n// x => true\r\n\r\nx = ls.every(function(item, index, list) {\r\n  return item % 2 === 0;\r\n});\r\n// x => false\r\n```\r\n```js\r\n// With optional context\r\nvar obj = {foo:'bar'};\r\nls.every(obj, function(item, index, list) {\r\n  // this => {foo:'bar'}\r\n});\r\n```\r\n\r\n<a name='list-reduce'></a>\r\n### List#reduce( [initval,] iterator )\r\nReduces the list into a single accumulated value.\r\nLeft to right.\r\n\r\n```js\r\nvar ls = coll.List([1,2,3]);\r\nvar sum = ls.reduce(function(a, b, index, list) {\r\n  return a + b;\r\n});\r\n// sum => 6\r\n```\r\n```js\r\nvar ls = coll.List([3,8,2,5]);\r\nvar max = ls.reduce(function(a, b, index, list) {\r\n  return a >= b ? a : b;\r\n});\r\n// max => 8\r\n```\r\n```js\r\n// With optional initval\r\nvar ls = coll.List([1,2,3]);\r\nvar x = ls.reduce([], function(arr, b, index, list) {\r\n  arr.push(b * 10);\r\n  return arr;\r\n});\r\n// x => [10, 20, 30]\r\n```\r\n\r\n<a name='list-reduceright'></a>\r\n### List#reduceRight( [initval,] iterator )\r\nReduces the list into a single accumulated value.\r\nRight to left.\r\n\r\n```js\r\nvar ls = coll.List('abc');\r\nvar x = ls.reduceRight(function(a, b, index, list) {\r\n  return a + b;\r\n});\r\n// x => 'cba'\r\n```\r\n```js\r\n// With optional initval\r\nvar ls = coll.List('abc');\r\nvar x = ls.reduceRight('---', function(str, b, index, list) {\r\n  return str + b;\r\n});\r\n// x => '---cba'\r\n```\r\n\r\n\r\n[List]:               #list\r\n\r\n[List.range]:         #list_range\r\n\r\n[List Constructor]:   #list-constructor\r\n\r\n[List#length]:        #list-length\r\n\r\n[List#get]:           #list-get\r\n[List#set]:           #list-set\r\n[List#add]:           #list-add\r\n[List#addRange]:      #list-addrange\r\n[List#insert]:        #list-insert\r\n[List#insertRange]:   #list-insertrange\r\n[List#remove]:        #list-remove\r\n[List#removeFirst]:   #list-removefirst\r\n[List#removeLast]:    #list-removelast\r\n[List#removeIf]:      #list-removeif\r\n[List#removeAll]:     #list-removeall\r\n[List#removeAt]:      #list-removeat\r\n[List#clear]:         #list-clear\r\n\r\n[List#slice]:         #list-slice\r\n[List#concat]:        #list-concat\r\n[List#join]:          #list-join\r\n[List#count]:         #list-count\r\n[List#countIf]:       #list-countif\r\n[List#contains]:      #list-contains\r\n[List#find]:          #list-find\r\n[List#findLast]:      #list-findlast\r\n[List#findAll]:       #list-findall\r\n[List#first]:         #list-first\r\n[List#last]:          #list-last\r\n[List#unique]:        #list-unique\r\n[List#clean]:         #list-clean\r\n\r\n[List#clone]:         #list-clone\r\n[List#toArray]:       #list-toarray\r\n\r\n[List#intersect]:     #list-intersect\r\n[List#difference]:    #list-difference\r\n[List#union]:         #list-union\r\n[List#max]:           #list-max\r\n[List#min]:           #list-min\r\n\r\n[List#zip]:           #list-zip\r\n\r\n[List#take]:          #list-take\r\n[List#takeWhile]:     #list-takewhile\r\n[List#drop]:          #list-drop\r\n[List#dropWhile]:     #list-dropwhile\r\n[List#group]:         #list-group\r\n[List#partition]:     #list-partition\r\n\r\n[List#indexOf]:       #list-indexof\r\n[List#lastIndexOf]:   #list-lastindexof\r\n[List#indexIf]:       #list-indexif\r\n[List#lastIndexIf]:   #list-lastindexif\r\n[List#indicesOf]:     #list-indicesof\r\n[List#indicesIf]:     #list-indicesif\r\n\r\n[List#forEach]:       #list-foreach\r\n[List#some]:          #list-some\r\n[List#every]:         #list-every\r\n[List#reduce]:        #list-reduce\r\n[List#reduceRight]:   #list-reduceright\r\n\r\n[List#sort]:          #list-sort\r\n[List#reverse]:       #list-reverse\r\n\r\n[List#filter]:        #list-filter\r\n[List#reject]:        #list-reject\r\n[List#map]:           #list-map\r\n[List#intersperse]:   #list-intersperse\r\n\r\n\r\n[Array#sort]: https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/sort\r\n\r\n\r\n\r\n<a name='dict'></a>\r\nDict\r\n====\r\nA simple key/value collection, where keys are `Strings` and values can be any\r\ntype or object. Keys are unique within the collection.\r\n\r\n\r\n<a name='dict-constructor'></a>\r\nDict Constructor\r\n----------------\r\n`new` is optional\r\n\r\n```js\r\nvar d1 = new coll.Dict;\r\nvar d2 = coll.Dict();\r\n\r\nd1 instanceof coll.Dict; // true\r\nd2 instanceof coll.Dict; // true\r\n```\r\n\r\nAccepts an object literal to initially populate the dict.\r\n\r\n```js\r\nvar d = coll.Dict({a:10, b:20});\r\n// d => {a:10, b:20}\r\n```\r\n\r\nDict Instance Properties\r\n------------------------\r\n\r\n<a name='dict-length'></a>\r\n### Dict#length\r\nThe number of items in the dict.\r\n\r\n```js\r\nvar d = coll.Dict({a:2, b:4, c:6});\r\n// d.length => 3\r\n```\r\n\r\n<a name='dict-keys'></a>\r\n### Dict#keys\r\nAn array of the dict's keys. Order is arbitrary.\r\n\r\n```js\r\nvar d = coll.Dict({name:'Fred', age:5000, town:'Bedrock'});\r\n// d.keys => ['name', 'age', 'town']\r\n```\r\n\r\n<a name='dict-values'></a>\r\n### Dict#values\r\nAn array of the dict's values. Order is arbitrary.\r\n\r\n```js\r\nvar d = coll.Dict({name:'Fred', age:5000, town:'Bedrock'});\r\n// d.values => ['Fred', 5000, 'Bedrock']\r\n```\r\n\r\nDict Instance Functions\r\n-----------------------\r\n\r\n<a name='dict-haskey'></a>\r\n### Dict#haskey( key )\r\nReturns `true` if `key` exists within the dict. Otherwise `false` is returned.\r\n\r\n```js\r\nvar d = coll.Dict({name:'Fred', age:5000, town:'Bedrock'});\r\nd.hasKey('town');    // true\r\nd.hasKey('address'); // false\r\n```\r\n\r\n<a name='dict-get'></a>\r\n### Dict#get( key [, \\_default] )\r\nReturns the value for `key`.\r\nIf an optional `_default` value is passed, that will be returned in cases\r\nwhere the `key` does not exist within the dict.\r\nIf `key` does not exist within the dict and `_default` is not passed,\r\na `ReferenceError` is thrown.\r\n\r\n```js\r\nvar d = coll.Dict({name:'Fred', age:5000, town:'Bedrock'});\r\nvar x = d.get('town');\r\n// x => 'Bedrock'\r\n\r\nx = d.get('occupation', 'excavator');\r\n// x => 'excavator'\r\n\r\nd.get('occupation'); // throws ReferenceError\r\n```\r\n\r\n<a name='dict-set'></a>\r\n### Dict#set( key, value )\r\nSet value `value` for key `key`. If the key already exists in the dict\r\nthen it's value will be overwritten. If the `key` does not exist, then it\r\nwill be added. Returns the instance.\r\n\r\n```js\r\nvar d = coll.Dict();\r\nvar x = d.set('volume', .92);\r\n// d => {volume: .92}\r\nx === d; // true\r\n\r\nd.set('volume', .85);\r\n// d => {volume: .85}\r\n```\r\n\r\n<a name='dict-add'></a>\r\n### Dict#add( hash [, hash*N*] )\r\nAdds one or more key/value pairs to the dict.\r\nReturns the instance.\r\n\r\n```js\r\nvar d = coll.Dict();\r\nd.add({a:'alpha', b:'bravo'});\r\nd.add({c:'charlie'}, {d:'delta', e:'echo'}, {f:'foxtrot'});\r\n// d => {\r\n//  a:'alpha', b:'bravo', c:'charlie', d:'delta', e:'echo', f:'foxtrot'\r\n// }\r\n```\r\n\r\n<a name='dict-remove'></a>\r\n### Dict#remove( key )\r\nRemoves a key/value pair from the collection by `key` and returns the\r\nremoved value.\r\nIf `key` does not exist within the dict a `ReferenceError` is thrown.\r\n\r\n```js\r\nvar d = coll.Dict({name:'Fred', age:5000, town:'Bedrock'});\r\nvar x = d.remove('town');\r\n// x => 'Bedrock'\r\n// d => {name:'Fred', age:5000}\r\n\r\nd.remove('occupation'); // throws ReferenceError\r\n```\r\n\r\n<a name='dict-clear'></a>\r\n### Dict#clear()\r\nRemoves all key/value pairs from the dict. Returns the instance.\r\n\r\n```js\r\nvar d = coll.Dict({name:'Fred', age:5000, town:'Bedrock'});\r\nvar x = d.clear();\r\n// d => {}\r\nx === d; // true\r\n```\r\n\r\n<a name='dict-foreach'></a>\r\n### Dict#forEach( [context,] iterator )\r\nIterates over the dict, calling the `iterator` function for\r\neach key/value pair. Returns the instance.\r\n\r\n```js\r\nvar d = coll.Dict({name:'Fred', age:5000, town:'Bedrock'});\r\nvar x = d.forEach(function(key, value, dict) {\r\n  console.log('Key: %s, Val: %s', key, value);\r\n});\r\n// Output:\r\n//  Key: name, Val: Fred\r\n//  Key: age, Val: 5000\r\n//  Key: town, Val: Bedrock\r\nx === d; // true\r\n```\r\n```js\r\n// With optional context\r\nvar obj = {foo:'bar'};\r\nd.forEach(obj, function(key, value, dict) {\r\n  // this => {foo:'bar'}\r\n});\r\n```\r\n\r\n<a name='dict-some'></a>\r\n### Dict#some( [context,] iterator )\r\nReturns `true` if at least one key/value pair in the dict passes the\r\n`iterator` function.\r\nOtherwise `false` is returned.\r\n\r\n```js\r\nvar d = coll.Dict();\r\nd.set('Creep',            {year:1993, album:'Pablo Honey'});\r\nd.set('Paranoid Android', {year:1997, album:'OK Computer'});\r\nd.set('Karma Police',     {year:1997, album:'OK Computer'});\r\nvar x = d.some(function(key, value, dict) {\r\n  return value.year > 1996;\r\n});\r\n// x => true\r\n```\r\n```js\r\n// With optional context\r\nvar obj = {foo:'bar'};\r\nd.some(obj, function(key, value, dict) {\r\n  // this => {foo:'bar'}\r\n});\r\n```\r\n\r\n<a name='dict-every'></a>\r\n### Dict#every( [context,] iterator )\r\nReturns `true` if every key/value pair in the dict passes the\r\n`iterator` function.\r\nOtherwise `false` is returned.\r\n\r\n```js\r\nvar d = coll.Dict();\r\nd.set('Creep',            {year:1993, album:'Pablo Honey'});\r\nd.set('Paranoid Android', {year:1997, album:'OK Computer'});\r\nd.set('Karma Police',     {year:1997, album:'OK Computer'});\r\nvar x = d.every(function(key, value, dict) {\r\n  return value.album === 'OK Computer';\r\n});\r\n// x => false\r\n```\r\n```js\r\n// With optional context\r\nvar obj = {foo:'bar'};\r\nd.every(obj, function(key, value, dict) {\r\n  // this => {foo:'bar'}\r\n});\r\n```\r\n\r\n<a name='dict-filter'></a>\r\n### Dict#filter( [context,] iterator )\r\nReturns a new `Dict` composed of key/value pairs that pass the\r\n`iterator` function.\r\n\r\n```js\r\nvar d = coll.Dict();\r\nd.set('Creep',            {year:1993, album:'Pablo Honey'});\r\nd.set('Paranoid Android', {year:1997, album:'OK Computer'});\r\nd.set('Karma Police',     {year:1997, album:'OK Computer'});\r\nvar x = d.filter(function(key, value, dict) {\r\n  return value.album === 'OK Computer';\r\n});\r\n// x => {\r\n//  'Paranoid Android' : {year:1997, album:'OK Computer'},\r\n//  'Karma Police'     : {year:1997, album:'OK Computer'}\r\n// }\r\n```\r\n```js\r\n// With optional context\r\nvar obj = {foo:'bar'};\r\nd.filter(obj, function(key, value, dict) {\r\n  // this => {foo:'bar'}\r\n});\r\n```\r\n\r\n<a name='dict-reject'></a>\r\n### Dict#reject( [context,] iterator )\r\nReturns a new `Dict` composed of key/value pairs that fail the\r\n`iterator` function.\r\n\r\n```js\r\nvar d = coll.Dict();\r\nd.set('Creep',            {year:1993, album:'Pablo Honey'});\r\nd.set('Paranoid Android', {year:1997, album:'OK Computer'});\r\nd.set('Karma Police',     {year:1997, album:'OK Computer'});\r\nvar x = d.reject(function(key, value, dict) {\r\n  return value.album === 'OK Computer';\r\n});\r\n// x => {\r\n//  'Creep' : {year:1993, album:'Pablo Honey'},\r\n// }\r\n```\r\n```js\r\n// With optional context\r\nvar obj = {foo:'bar'};\r\nd.reject(obj, function(key, value, dict) {\r\n  // this => {foo:'bar'}\r\n});\r\n```\r\n\r\n<a name='dict-clone'></a>\r\n### Dict#clone()\r\nReturns a copy of the dict in a new instance.\r\n\r\n```js\r\nvar d = coll.Dict({a:2, b:4});\r\nvar x = d.clone();\r\n// x => {a:2, b:4}\r\n// d => {a:2, b:4}\r\nx instanceof coll.Dict; // true\r\nx === d;                // false\r\n```\r\n\r\n<a name='dict-fill'></a>\r\n### Dict#fill( defaults )\r\nReturns a new `Dict` with the *holes* in the instance collection filled\r\nby the those defined in `defaults`.\r\n`defaults` can be an object literal or another `Dict`.\r\n\r\n```js\r\n// Example: Day calendar of schedule openings, 9am to 2pm\r\nvar defaultSchedule = {\r\n  '9:00 am'  : 'unavailable',\r\n  '10:00 am' : 'unavailable',\r\n  '11:00 am' : 'unavailable',\r\n  '12:00 pm' : 'unavailable',\r\n  '1:00 pm'  : 'unavailable',\r\n  '2:00 pm'  : 'unavailable'\r\n}\r\nvar openings = coll.Dict({\r\n  '10:00 am' : 'open',\r\n  '11:00 am' : 'open',\r\n  '1:00 pm'  : 'open'\r\n});\r\n\r\nvar sched = openings.fill(defaultSchedule);\r\n// sched => {\r\n//   '9:00 am'  : 'unavailable',\r\n//   '10:00 am' : 'open',\r\n//   '11:00 am' : 'open',\r\n//   '12:00 pm' : 'unavailable',\r\n//   '1:00 pm'  : 'open',\r\n//   '2:00 pm'  : 'unavailable'\r\n// }\r\n```\r\n\r\n<a name='dict-toliteral'></a>\r\n### Dict#toLiteral( [serializer] )\r\nReturns the key/value pairs of the dict as an object literal.\r\nIf the optional `serializer` function is passed, that will be used to\r\ndetermine the key.\r\n\r\n\r\n```js\r\nvar d = coll.Dict({a:10, b:20, c:30});\r\nvar obj = d.toLiteral();\r\n// obj => {a:10, b:20, c:30}\r\nfor (var key in obj) {\r\n  console.log('%s : %s', key, obj[key]);\r\n}\r\n// Output:\r\n//  a : 10\r\n//  b : 20\r\n//  c : 30\r\n```\r\n```js\r\n// With optional serializer\r\nvar d = coll.Dict({a:10, b:20, c:30});\r\nvar obj = d.toLiteral(function(key, value) {\r\n  return key.toUpperCase();\r\n});\r\n// obj => {A:10, B:20, C:30}\r\n```\r\n\r\n<a name='dict-toarray'></a>\r\n### Dict#toArray()\r\nReturns the dict's key/value pairs in an array of 'tuples'.\r\n\r\n```js\r\nvar d = coll.Dict({a:10, b:20, c:30});\r\nvar x = d.toArray();\r\n// x => [['a', 10], ['b', 20], ['c', 30]]\r\n```\r\n\r\n\r\n[Dict]:               #dict\r\n[Dict Constructor]:   #dict-constructor\r\n\r\n[Dict#length]:        #dict-length\r\n[Dict#keys]:          #dict-keys\r\n[Dict#values]:        #dict-values\r\n\r\n[Dict#hasKey]:        #dict-haskey\r\n\r\n[Dict#get]:           #dict-get\r\n[Dict#set]:           #dict-set\r\n[Dict#add]:           #dict-add\r\n[Dict#remove]:        #dict-remove\r\n[Dict#clear]:         #dict-clear\r\n\r\n[Dict#forEach]:       #dict-foreach\r\n[Dict#some]:          #dict-some\r\n[Dict#every]:         #dict-every\r\n[Dict#filter]:        #dict-filter\r\n[Dict#reject]:        #dict-reject\r\n\r\n[Dict#clone]:        #dict-clone\r\n[Dict#fill]:         #dict-fill\r\n[Dict#toLiteral]:    #dict-toliteral\r\n[Dict#toArray]:      #dict-toarray\r\n\r\n\r\n\r\n\r\n\r\n<a name='map'></a>\r\nMap\r\n===\r\nA key/value collection, where both keys and values can be any object or type.\r\nKeys are unique within the collection by strict equality.\r\n\r\n\r\n<a name='map-constructor'></a>\r\nMap Constructor\r\n---------------\r\n`new` is optional\r\n\r\n```js\r\nvar m1 = new coll.Map;\r\nvar m2 = coll.Map();\r\n\r\nm1 instanceof coll.Map; // true\r\nm2 instanceof coll.Map; // true\r\n```\r\n\r\nAccepts an array of key/value pairs ('tuples') to initially populate the map.\r\n\r\n```js\r\nvar m = coll.Map([['a', 10], [/foo/i, 20]]);\r\n// m => {\r\n//  'a'    => 10,\r\n//  /foo/i => 20\r\n// }\r\n```\r\n\r\nMap Instance Properties\r\n-----------------------\r\n\r\n<a name='map-length'></a>\r\n### Map#length\r\nThe number of items in the map.\r\n\r\n```js\r\nvar m = coll.Map([['a', 10], [/foo/i, 20]]);\r\n// m.length => 2\r\n```\r\n\r\n<a name='map-keys'></a>\r\n### Map#keys\r\nAn array of the map's keys. Order is arbitrary.\r\n\r\n```js\r\nvar m = coll.Map([[{a:1}, 'dog'], [{b:2}, 'cat'], [23.389, 'rock']]);\r\n// m.keys => [{a:1}, {b:2}, 23.389]\r\n```\r\n\r\n<a name='map-values'></a>\r\n### Map#values\r\nAn array of the dict's values. Order is arbitrary.\r\n\r\n```js\r\nvar m = coll.Map([[{a:1}, 'dog'], [{b:2}, 'cat'], [23.389, 'rock']]);\r\n// m.values => ['dog', 'cat', 'rock']\r\n```\r\n\r\nMap Instance Functions\r\n----------------------\r\n\r\n<a name='map-haskey'></a>\r\n### Map#haskey( key )\r\nReturns `true` if `key` exists within the map. Otherwise `false` is returned.\r\nKeys are determined and are unique by strict equality.\r\n\r\n```js\r\nvar m = coll.Map();\r\nvar key1 = {a:1};\r\nvar key2 = /foo/i;\r\nm.set(key1, 'a');\r\nm.set(key2, 'b');\r\nm.set(9999, 'c');\r\n\r\nm.hasKey(key1);   // true\r\nm.hasKey({a:1});  // false\r\nm.hasKey(key2);   // true\r\nm.hasKey(/foo/i); // false\r\nm.hasKey(9999);   // true\r\n```\r\n\r\n<a name='map-get'></a>\r\n### Map#get( key [, \\_default] )\r\nReturns the value for `key`.\r\nIf an optional `_default` value is passed, that will be returned in cases\r\nwhere the `key` does not exist within the map.\r\nIf `key` does not exist within the map and `_default` is not passed,\r\na `ReferenceError` is thrown.\r\nKeys are determined and are unique by strict equality.\r\n\r\n```js\r\nvar m = coll.Map();\r\nvar key1 = /foo/gi;\r\nm.set(key1, 'stuff');\r\nm.set(23.89, 'thing');\r\n\r\nvar x = m.get(key1);\r\n// x => 'stuff'\r\nx = m.get(23.89);\r\n// x => 'thing'\r\n\r\nx = m.get(/bar/gi, 'nada');\r\n// x => 'nada'\r\n\r\nm.get(77.11);   // throws ReferenceError\r\nm.get(/foo/gi); // throws ReferenceError\r\n```\r\n\r\n<a name='map-set'></a>\r\n### Map#set( key, value )\r\nSet value `value` for key `key`. If the key already exists in the map\r\nthen it's value will be overwritten. If the `key` does not exist, then it\r\nwill be added. Returns the instance.\r\n\r\n```js\r\nvar m = coll.Map();\r\nvar x = m.set('volume', .92);\r\n// m => {\r\n//  'volume' => .92\r\n// }\r\nx === d; // true\r\n\r\nd.set('volume', .85);\r\n// m => {\r\n//  'volume' => .85\r\n// }\r\n```\r\n\r\n<a name='map-remove'></a>\r\n### Map#remove( key )\r\nRemoves a key/value pair from the collection by `key` and returns the\r\nremoved value.\r\nIf `key` does not exist within the map a `ReferenceError` is thrown.\r\n\r\n```js\r\nvar m = coll.Map();\r\nvar key1 = {name:'Jen'};\r\nvar key2 = {name:'Tim'};\r\nm.set(key1, 83.234);\r\nm.set(key2, 72.183);\r\nm.set('yo', 14.384);\r\n\r\nvar x = m.remove(key2);\r\n// x => 72.183\r\n// m => {\r\n//  {name:'Jen'} => 83.234,\r\n//  'yo'         => 14.384\r\n// }\r\n\r\nm.remove('hi');         // throws ReferenceError\r\nm.remove({name:'Jen'}); // throws ReferenceError\r\n```\r\n\r\n<a name='map-clear'></a>\r\n### Map#clear()\r\nRemoves all key/value pairs from the map. Returns the instance.\r\n\r\n```js\r\nvar m = coll.Map([[/yo/, 'joe'], [new Date, 123]]);\r\nvar x = m.clear();\r\n// m => {}\r\nx === m; // true\r\n```\r\n\r\n<a name='map-foreach'></a>\r\n### Map#forEach( [context,] iterator )\r\nIterates over the map, calling the `iterator` function for\r\neach key/value pair. Returns the instance.\r\n\r\n```js\r\nvar m = coll.Map();\r\nm.set(new Date(2012, 4, 5),  'Cinco de Mayo');\r\nm.set(new Date(2012, 3, 17), 'Taxes!!');\r\nm.set(new Date(2012, 9, 31), 'Halloween');\r\n\r\nvar x = m.forEach(function(key, value, map) {\r\n  console.log('Key: %s, Val: %s', key.toDateString(), value);\r\n});\r\n// Output:\r\n//  Key: Sat May 05 2012, Val: Cinco de Mayo\r\n//  Key: Tue Apr 17 2012, Val: Taxes!!\r\n//  Key: Wed Oct 31 2012, Val: Halloween\r\nx === m; // true\r\n```\r\n```js\r\n// With optional context\r\nvar obj = {foo:'bar'};\r\nm.forEach(obj, function(key, value, dict) {\r\n  // this => {foo:'bar'}\r\n});\r\n```\r\n\r\n<a name='map-some'></a>\r\n### Map#some( [context,] iterator )\r\nReturns `true` if at least one key/value pair in the map passes the\r\n`iterator` function.\r\nOtherwise `false` is returned.\r\n\r\n```js\r\nvar m = coll.Map();\r\nm.set(new Date(2011, 9, 31), 'Halloween');\r\nm.set(new Date(2012, 4, 5),  'Cinco de Mayo');\r\nm.set(new Date(2012, 3, 17), 'Taxes!!');\r\nm.set(new Date(2012, 9, 31), 'Halloween');\r\n\r\nvar x = m.some(function(key, value, dict) {\r\n  return value !== 'Halloween' && key.getFullYear() === 2012;\r\n});\r\n// x => true\r\n```\r\n```js\r\n// With optional context\r\nvar obj = {foo:'bar'};\r\nm.some(obj, function(key, value, dict) {\r\n  // this => {foo:'bar'}\r\n});\r\n```\r\n\r\n<a name='map-every'></a>\r\n### Map#every( [context,] iterator )\r\nReturns `true` if every key/value pair in the map passes the\r\n`iterator` function.\r\nOtherwise `false` is returned.\r\n\r\n```js\r\nvar m = coll.Map();\r\nm.set(new Date(2011, 9, 31), 'Halloween');\r\nm.set(new Date(2012, 4, 5),  'Cinco de Mayo');\r\nm.set(new Date(2012, 3, 17), 'Taxes!!');\r\nm.set(new Date(2012, 9, 31), 'Halloween');\r\n\r\nvar x = m.every(function(key, value, dict) {\r\n  return key.getFullYear() === 2012;\r\n});\r\n// x => false\r\n\r\nx = m.every(function(key, value, dict) {\r\n  return key.getFullYear() > 2010;\r\n});\r\n// x => true\r\n```\r\n```js\r\n// With optional context\r\nvar obj = {foo:'bar'};\r\nm.every(obj, function(key, value, dict) {\r\n  // this => {foo:'bar'}\r\n});\r\n```\r\n\r\n<a name='map-filter'></a>\r\n### Map#filter( [context,] iterator )\r\nReturns a new `Map` composed of key/value pairs that pass the\r\n`iterator` function.\r\n\r\n```js\r\nvar m = coll.Map();\r\nm.set(new Date(2011, 9, 31), 'Halloween');\r\nm.set(new Date(2012, 0, 1),  'New Years');\r\nm.set(new Date(2012, 4, 5),  'Cinco de Mayo');\r\nm.set(new Date(2012, 3, 17), 'Taxes!!');\r\nm.set(new Date(2012, 9, 31), 'Halloween');\r\n\r\nvar x = m.filter(function(key, value, dict) {\r\n  return key.getMonth() >= 3 && value !== 'Taxes!!';\r\n});\r\n// x => {\r\n//  Mon Oct 31 2011 => 'Halloween',\r\n//  Sat May 05 2012 => 'Cinco de Mayo',\r\n//  Wed Oct 31 2012 => 'Halloween'\r\n// }\r\n```\r\n```js\r\n// With optional context\r\nvar obj = {foo:'bar'};\r\nm.filter(obj, function(key, value, dict) {\r\n  // this => {foo:'bar'}\r\n});\r\n```\r\n\r\n<a name='map-reject'></a>\r\n### Map#reject( [context,] iterator )\r\nReturns a new `Map` composed of key/value pairs that fail the\r\n`iterator` function.\r\n\r\n```js\r\nvar m = coll.Map();\r\nm.set(new Date(2011, 9, 31), 'Halloween');\r\nm.set(new Date(2012, 0, 1),  'New Years');\r\nm.set(new Date(2012, 4, 5),  'Cinco de Mayo');\r\nm.set(new Date(2012, 3, 17), 'Taxes!!');\r\nm.set(new Date(2012, 9, 31), 'Halloween');\r\n\r\nvar x = m.reject(function(key, value, dict) {\r\n  return key.getMonth() > 3;\r\n});\r\n// x => {\r\n//  Sun Jan 01 2012 => 'New Years'\r\n//  Tue Apr 17 2012 => 'Taxes!!'\r\n// }\r\n```\r\n```js\r\n// With optional context\r\nvar obj = {foo:'bar'};\r\nm.reject(obj, function(key, value, dict) {\r\n  // this => {foo:'bar'}\r\n});\r\n```\r\n\r\n<a name='map-clone'></a>\r\n### Map#clone()\r\nReturns a copy of the map in a new instance.\r\n\r\n```js\r\nvar m = coll.Map([[{a:1}, 11], [{b:2}, 22]]);\r\nvar x = m.clone();\r\n\r\n// x => {\r\n//  {a:1} => 11,\r\n//  {b:2} => 22\r\n// }\r\n// m => {\r\n//  {a:1} => 11,\r\n//  {b:2} => 22\r\n// }\r\nx instanceof coll.Map; // true\r\nx === m;               // false\r\n```\r\n\r\n<a name='map-fill'></a>\r\n### Map#fill( defaults )\r\nReturns a new `Map` with the *holes* in the instance collection filled\r\nby the those defined in `defaults`.\r\n`defaults` can be an Array of *tuples* or another `Map`.\r\n\r\n```js\r\n// Example: Day calendar of schedule openings, 9am to 2pm\r\nvar defaultSchedule = [\r\n  ['9:00 am',  'unavailable'],\r\n  ['10:00 am', 'unavailable'],\r\n  ['11:00 am', 'unavailable'],\r\n  ['12:00 pm', 'unavailable'],\r\n  ['1:00 pm',  'unavailable'],\r\n  ['2:00 pm',  'unavailable']\r\n];\r\nvar openings = coll.Map([\r\n  ['10:00 am', 'open'],\r\n  ['11:00 am', 'open'],\r\n  ['1:00 pm',  'open']\r\n]);\r\n\r\nvar sched = openings.fill(defaultSchedule);\r\n// sched => {\r\n//   '9:00 am'  => 'unavailable',\r\n//   '10:00 am' => 'open',\r\n//   '11:00 am' => 'open',\r\n//   '12:00 pm' => 'unavailable',\r\n//   '1:00 pm'  => 'open',\r\n//   '2:00 pm'  => 'unavailable'\r\n// }\r\n```\r\n\r\n<a name='map-toliteral'></a>\r\n### Map#toLiteral( [serializer] )\r\nReturns the key/value pairs of the map as an object literal.\r\nIf the optional `serializer` function is passed, that will be used to\r\ndetermine the key.\r\n\r\nIf your map keys are not strings, numbers, or anything that would not\r\nautomatically convert (`toString()`) to a unique key string, it is highly\r\nrecommended that you provide a `serializer` function. Otherwise you will\r\nrisk losing key/value pairs due to key collision and/or the keys produced\r\nmay not be that descriptive.\r\n\r\n```js\r\nvar m = coll.Map();\r\nvar key1 = {position:'rb', team:'Vikings'};\r\nvar key2 = {position:'wr', team:'Cardinals'};\r\nvar key3 = {position:'ss', team:'Steelers'};\r\nm.set(key1, 'Peterson');\r\nm.set(key2, 'Fitz');\r\nm.set(key3, 'Polamalu');\r\n\r\nvar x = m.toLiteral(function(key, val) {\r\n  return key.team + ':' + key.position;\r\n});\r\n// x => {\r\n//  'Vikings:rb':   'Peterson',\r\n//  'Cardinals:wr': 'Fitz',\r\n//  'Steelers:ss':  'Polamalu'\r\n// }\r\nfor (var key in x) {\r\n  console.log('%s : %s', key, x[key]);\r\n}\r\n// Output:\r\n//  Vikings:rb : Peterson\r\n//  Cardinals:wr : Fitz\r\n//  Steelers:ss : Polamalu\r\n\r\n// Without serializer function\r\nx = m.toLiteral();\r\n// x => {'[object Object]': 'Polamalu'}\r\n```\r\n\r\n<a name='map-toarray'></a>\r\n### Map#toArray()\r\nReturns the map's key/value pairs in an array of 'tuples'.\r\n\r\n```js\r\nvar m = coll.Map();\r\nvar key1 = {position:'rb', team:'Vikings'};\r\nvar key2 = {position:'wr', team:'Cardinals'};\r\nvar key3 = {position:'ss', team:'Steelers'};\r\nm.set(key1, 'Peterson');\r\nm.set(key2, 'Fitz');\r\nm.set(key3, 'Polamalu');\r\n\r\nvar x = m.toArray();\r\n// x => [\r\n//  [{position:'rb', team:'Vikings'},   'Peterson'],\r\n//  [{position:'wr', team:'Cardinals'}, 'Fitz'],\r\n//  [{position:'ss', team:'Steelers'},  'Polamalu']\r\n// ]\r\n```\r\n\r\n\r\n[Map]:                #map\r\n[Map Constructor]:    #map-constructor\r\n\r\n[Map#length]:         #map-length\r\n[Map#keys]:           #map-keys\r\n[Map#values]:         #map-values\r\n\r\n[Map#hasKey]:         #map-haskey\r\n\r\n[Map#get]:            #map-get\r\n[Map#set]:            #map-set\r\n[Map#remove]:         #map-remove\r\n[Map#clear]:          #map-clear\r\n\r\n[Map#forEach]:        #map-foreach\r\n[Map#some]:           #map-some\r\n[Map#every]:          #map-every\r\n[Map#filter]:         #map-filter\r\n[Map#reject]:         #map-reject\r\n\r\n[Map#clone]:          #map-clone\r\n[Map#fill]:           #map-fill\r\n[Map#toLiteral]:      #map-toliteral\r\n[Map#toArray]:        #map-toarray\r\n\r\n","name":"Coll","tagline":"JavaScript Collections for Node.js"}