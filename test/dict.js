// Generated by CoffeeScript 1.3.3
var Dictionary, TypedDictionary, expect, _ref;

expect = require('expect.js');

_ref = require('../lib/coll'), TypedDictionary = _ref.TypedDictionary, Dictionary = _ref.Dictionary;

describe('Dictionary', function() {
  describe('constructor', function() {
    describe('TypedDictionary', function() {
      it('should create a new instance with or without the `new` keyword', function() {
        var d1, d2;
        d1 = new TypedDictionary('String', 'Number');
        d2 = TypedDictionary('String', 'Number');
        expect(d1).to.be.a(TypedDictionary);
        expect(d2).to.be.a(TypedDictionary);
        return expect(d1).not.to.be(d2);
      });
      return it('should require a key and value type', function() {
        expect(function() {
          return TypedDictionary();
        }).to.throwError(function(e) {
          expect(e).to.be.a(TypeError);
          return expect(e.message).to.be('Parameter `keyType` is required');
        });
        expect(function() {
          return TypedDictionary('String');
        }).to.throwError(function(e) {
          expect(e).to.be.a(TypeError);
          return expect(e.message).to.be('Parameter `valType` is required');
        });
        return expect(function() {
          return TypedDictionary('String', 'RegExp');
        }).to.not.throwError();
      });
    });
    return describe('Dictionary', function() {
      return it('should accept an optional object to initialize the Dictionary', function() {
        var d;
        d = Dictionary({
          a: 2,
          b: 4
        });
        expect(d.get('a')).to.be(2);
        return expect(d.get('b')).to.be(4);
      });
    });
  });
  return describe('instance properties', function() {
    describe('TypedDictionary', function() {
      var d1, d2;
      d1 = d2 = null;
      beforeEach(function() {
        d1 = TypedDictionary('RegExp', Date);
        return d2 = TypedDictionary(Array, 'Number');
      });
      it('should have a `keyType` property', function() {
        expect(d1.keyType).to.be('RegExp');
        return expect(d2.keyType).to.be(Array);
      });
      it('should have a `valType` property', function() {
        expect(d1.valType).to.be(Date);
        return expect(d2.valType).to.be('Number');
      });
      it('should not allow type properties to be overwritten', function() {
        d1.keyType = String;
        d1.valType = 'Function';
        expect(d1.keyType).to.be('RegExp');
        return expect(d1.valType).to.be(Date);
      });
      it('should have a `keys` property', function() {
        var key1, key2;
        key1 = /foo/;
        key2 = /bar/;
        d1.set(key1, new Date);
        d1.set(key2, new Date);
        expect(d1.keys.length).to.be(2);
        expect(d1.keys).to.contain(key1);
        return expect(d1.keys).to.contain(key2);
      });
      it('should not allow the `keys` property to be modifed', function() {
        d1.set(/foo/, new Date);
        d1.set(/bar/, new Date);
        d1.keys = [];
        expect(d1.keys.length).to.be(2);
        d1.keys.splice(0);
        return expect(d1.keys.length).to.be(2);
      });
      return it('should have a length property', function() {
        d1.set(/foo/, new Date);
        d1.set(/bar/, new Date);
        return expect(d1.length).to.be(2);
      });
    });
    return describe('Dictionary', function() {
      var d1;
      d1 = null;
      beforeEach(function() {
        return d1 = Dictionary({
          name: 'Fred',
          age: 4000,
          wife: 'Wilma'
        });
      });
      return it('should have a length property', function() {
        return expect(d1.length).to.be(3);
      });
    });
  });
});
