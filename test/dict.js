// Generated by CoffeeScript 1.3.3
var Dict, Map, expect, _ref;

expect = require('expect.js');

_ref = require('../lib/coll'), Map = _ref.Map, Dict = _ref.Dict;

describe('Dict', function() {
  describe('constructor', function() {
    it('should accept an optional object to initialize the Dict', function() {
      var d;
      d = Dict({
        a: 2,
        b: 4
      });
      expect(d.get('a')).to.be(2);
      return expect(d.get('b')).to.be(4);
    });
    return it('should create a new instance with or without the `new` keyword', function() {
      var d1, d2;
      d1 = new Dict;
      d2 = Dict();
      expect(d1).to.be.a(Dict);
      expect(d2).to.be.a(Dict);
      return expect(d1).not.to.be(d2);
    });
  });
  describe('instance properties', function() {
    var d;
    d = null;
    beforeEach(function() {
      return d = Dict({
        name: 'Fred',
        age: 4000,
        wife: 'Wilma'
      });
    });
    it('should have a `keys` property', function() {
      expect(d.keys.length).to.be(3);
      return expect(d.keys).to.eql(['name', 'age', 'wife']);
    });
    it('should have a `values` property', function() {
      expect(d.values.length).to.be(3);
      return expect(d.values).to.eql(['Fred', 4000, 'Wilma']);
    });
    it('should not allow the `keys` property to be modifed', function() {
      d.keys = [];
      expect(d.keys.length).to.be(3);
      d.keys.splice(0);
      return expect(d.keys.length).to.be(3);
    });
    return it('should have a length property', function() {
      return expect(d.length).to.be(3);
    });
  });
  return describe('#add', function() {
    it('should add key/value pairs via one or more object literals', function() {
      var d;
      d = Dict();
      d.add({
        aaa: 111,
        bbb: 222
      });
      d.add({
        ccc: 333
      }, {
        ddd: 444,
        eee: 555
      }, {
        fff: 666
      });
      expect(d.length).to.be(6);
      expect(d.keys).to.eql(['aaa', 'bbb', 'ccc', 'ddd', 'eee', 'fff']);
      return expect(d.values).to.eql([111, 222, 333, 444, 555, 666]);
    });
    return it('should return `this` for chaining', function() {
      var d, x;
      d = Dict();
      x = d.add({
        foo: 'boo'
      });
      return expect(x).to.be(d);
    });
  });
});
