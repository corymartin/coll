// Generated by CoffeeScript 1.3.3
var Dictionary, TypedDictionary, expect, _ref;

expect = require('expect.js');

_ref = require('../lib/coll'), TypedDictionary = _ref.TypedDictionary, Dictionary = _ref.Dictionary;

describe('Dictionary Iteration Methods', function() {
  var d1, d2;
  d1 = d2 = null;
  beforeEach(function() {
    d1 = TypedDictionary('String', 'Number');
    d1.set('foo', 10);
    d1.set('bar', 33);
    return d2 = Dictionary({
      name: 'Fred',
      age: 4000
    });
  });
  describe('#forEach', function() {
    return it('should iterate over each item in the collection', function() {
      var cnt;
      cnt = 0;
      d1.forEach(function(val, key, dict) {
        expect(val).to.be(key === 'foo' ? 10 : 33);
        expect(key).to.be(val === 10 ? 'foo' : 'bar');
        expect(dict).to.be(d1);
        return ++cnt;
      });
      expect(cnt).to.be(2);
      cnt = 0;
      d2.forEach(function(val, key, dict) {
        expect(val).to.be(key === 'name' ? 'Fred' : 4000);
        expect(key).to.be(val === 'Fred' ? 'name' : 'age');
        expect(dict).to.be(d2);
        return ++cnt;
      });
      return expect(cnt).to.be(2);
    });
  });
  describe('#some', function() {
    it('should return true if at least one key/val passes the iterator test', function() {
      var x;
      x = d1.some(function(val, key, dict) {
        return val === 33;
      });
      expect(x).to.be(true);
      x = d1.some(function(val, key, dict) {
        return val === 99;
      });
      expect(x).to.be(false);
      x = d2.some(function(val, key, dict) {
        return val === 4000;
      });
      expect(x).to.be(true);
      x = d2.some(function(val, key, dict) {
        return val === 'Barney';
      });
      return expect(x).to.be(false);
    });
    return it('should pass 3 vals to callback: val, key, dict', function() {
      d1.some(function(val, key, dict) {
        expect(val).to.be(key === 'foo' ? 10 : 33);
        expect(key).to.be(val === 10 ? 'foo' : 'bar');
        return expect(dict).to.be(d1);
      });
      return d2.some(function(val, key, dict) {
        expect(val).to.be(key === 'name' ? 'Fred' : 4000);
        expect(key).to.be(val === 'Fred' ? 'name' : 'age');
        return expect(dict).to.be(d2);
      });
    });
  });
  describe('#every', function() {
    it('should return true if every key/val passes the iterator test', function() {
      var x;
      x = d1.every(function(val, key, dict) {
        return val < 40;
      });
      expect(x).to.be(true);
      x = d1.every(function(val, key, dict) {
        return val === 10;
      });
      expect(x).to.be(false);
      x = d2.every(function(val, key, dict) {
        return val !== void 0;
      });
      expect(x).to.be(true);
      x = d2.every(function(val, key, dict) {
        return val === 'Barney';
      });
      return expect(x).to.be(false);
    });
    return it('should pass 3 params to callback: val, key, dict', function() {
      d1.every(function(val, key, dict) {
        expect(val).to.be(key === 'foo' ? 10 : 33);
        expect(key).to.be(val === 10 ? 'foo' : 'bar');
        return expect(dict).to.be(d1);
      });
      return d2.every(function(val, key, dict) {
        expect(val).to.be(key === 'name' ? 'Fred' : 4000);
        expect(key).to.be(val === 'Fred' ? 'name' : 'age');
        return expect(dict).to.be(d2);
      });
    });
  });
  describe('#filter', function() {
    it('should return a new dictionary of key/vals that pass the iterator test', function() {
      var x;
      d1.set('zzz', 25);
      x = d1.filter(function(val, key) {
        return val > 20;
      });
      expect(x).to.be.a(TypedDictionary);
      expect(x.length).to.be(2);
      expect(x.some(function(v, k) {
        return v === 25 && k === 'zzz';
      })).to.be(true);
      expect(x.some(function(v, k) {
        return v === 33 && k === 'bar';
      })).to.be(true);
      expect(x).not.to.be(d1);
      expect(d1.length).to.be(3);
      d2.extend({
        stuff: 1000,
        how: /do/
      });
      x = d2.filter(function(val, key) {
        return typeof val === 'number';
      });
      expect(x).to.be.a(Dictionary);
      expect(x.length).to.be(2);
      expect(x.some(function(v, k) {
        return v === 1000 && k === 'stuff';
      })).to.be(true);
      expect(x.some(function(v, k) {
        return v === 4000 && k === 'age';
      })).to.be(true);
      expect(x).not.to.be(d2);
      return expect(d2.length).to.be(4);
    });
    return it('should pass 3 params to callback: val, key, dict', function() {
      d1.filter(function(val, key, dict) {
        expect(val).to.be(key === 'foo' ? 10 : 33);
        expect(key).to.be(val === 10 ? 'foo' : 'bar');
        return expect(dict).to.be(d1);
      });
      return d2.filter(function(val, key, dict) {
        expect(val).to.be(key === 'name' ? 'Fred' : 4000);
        expect(key).to.be(val === 'Fred' ? 'name' : 'age');
        return expect(dict).to.be(d2);
      });
    });
  });
  return describe('#map', function() {
    return it('should return a new dictionary composed of the results of calling\nthe iterator function on each key/value', function() {
      var x;
      x = d1.map(function(val, key) {
        return ["_" + key + "_", 321];
      });
      expect(x).to.be.a(TypedDictionary);
      expect(x.length).to.be(2);
      expect(x.every(function(v, k) {
        return /^_.+_$/.test(k);
      })).to.be(true);
      expect(x.every(function(v, k) {
        return v === 321;
      })).to.be(true);
      expect(x).not.to.be(d1);
      x = d2.map(function(val, key) {
        return ["=" + key + "=", 321];
      });
      expect(x).to.be.a(Dictionary);
      expect(x.length).to.be(2);
      expect(x.every(function(v, k) {
        return /^=.+=$/.test(k);
      })).to.be(true);
      expect(x.every(function(v, k) {
        return v === 321;
      })).to.be(true);
      expect(x).not.to.be(d2);
      /*
            Dictionary's iterator can also return an {k:v} object
      */

      x = d2.map(function(val, key) {
        var o;
        o = {};
        o["=" + key + "="] = 321;
        return o;
      });
      expect(x).to.be.a(Dictionary);
      expect(x.length).to.be(2);
      expect(x.every(function(v, k) {
        return /^=.+=$/.test(k);
      })).to.be(true);
      expect(x.every(function(v, k) {
        return v === 321;
      })).to.be(true);
      return expect(x).not.to.be(d2);
    });
  });
  /*
    describe '#reduce', ->
      it 'should reduce the items in the list to a single value', ->
        d1.set 'zzz', 40
        d2.extend {town: 'bedrock'}
  
        console.log d1.toLiteral()
        x = d1.reduce 0, (a, b) -> a + b[1]
        expect(x).to.be 83
  */

});
