// Generated by CoffeeScript 1.3.3
var Dict, Map, expect, _ref;

expect = require('expect.js');

_ref = require('../lib/coll'), Map = _ref.Map, Dict = _ref.Dict;

describe('Dict / Map Iteration Methods', function() {
  var dict, map;
  map = dict = null;
  beforeEach(function() {
    map = Map();
    map.set('foo', 10);
    map.set('bar', 33);
    return dict = Dict({
      name: 'Fred',
      age: 4000
    });
  });
  describe('#forEach', function() {
    it('should iterate over each item in the collection', function() {
      var cnt;
      cnt = 0;
      map.forEach(function(val, key, dict) {
        expect(val).to.be(key === 'foo' ? 10 : 33);
        expect(key).to.be(val === 10 ? 'foo' : 'bar');
        expect(dict).to.be(map);
        return ++cnt;
      });
      expect(cnt).to.be(2);
      cnt = 0;
      dict.forEach(function(val, key, dict) {
        expect(val).to.be(key === 'name' ? 'Fred' : 4000);
        expect(key).to.be(val === 'Fred' ? 'name' : 'age');
        expect(dict).to.be(dict);
        return ++cnt;
      });
      return expect(cnt).to.be(2);
    });
    return it('should accept an optional context argument', function() {
      var obj;
      obj = {
        foo: 'bar'
      };
      map.forEach(obj, function(val, key) {
        return expect(this).to.be(obj);
      });
      return dict.forEach(obj, function(val, key) {
        return expect(this).to.be(obj);
      });
    });
  });
  describe('#some', function() {
    it('should return true if at least one key/val passes the iterator test', function() {
      var x;
      x = map.some(function(val, key, dict) {
        return val === 33;
      });
      expect(x).to.be(true);
      x = map.some(function(val, key, dict) {
        return val === 99;
      });
      expect(x).to.be(false);
      x = dict.some(function(val, key, dict) {
        return val === 4000;
      });
      expect(x).to.be(true);
      x = dict.some(function(val, key, dict) {
        return val === 'Barney';
      });
      return expect(x).to.be(false);
    });
    it('should pass 3 vals to callback: val, key, dict', function() {
      map.some(function(val, key, dict) {
        expect(val).to.be(key === 'foo' ? 10 : 33);
        expect(key).to.be(val === 10 ? 'foo' : 'bar');
        return expect(dict).to.be(map);
      });
      return dict.some(function(val, key, dict) {
        expect(val).to.be(key === 'name' ? 'Fred' : 4000);
        expect(key).to.be(val === 'Fred' ? 'name' : 'age');
        return expect(dict).to.be(dict);
      });
    });
    return it('should accept an optional context argument', function() {
      var obj;
      obj = {
        foo: 'bar'
      };
      map.some(obj, function(val, key) {
        return expect(this).to.be(obj);
      });
      return dict.some(obj, function(val, key) {
        return expect(this).to.be(obj);
      });
    });
  });
  return describe('#every', function() {
    it('should return true if every key/val passes the iterator test', function() {
      var x;
      x = map.every(function(val, key, dict) {
        return val < 40;
      });
      expect(x).to.be(true);
      x = map.every(function(val, key, dict) {
        return val === 10;
      });
      expect(x).to.be(false);
      x = dict.every(function(val, key, dict) {
        return val !== void 0;
      });
      expect(x).to.be(true);
      x = dict.every(function(val, key, dict) {
        return val === 'Barney';
      });
      return expect(x).to.be(false);
    });
    it('should pass 3 params to callback: val, key, dict', function() {
      map.every(function(val, key, dict) {
        expect(val).to.be(key === 'foo' ? 10 : 33);
        expect(key).to.be(val === 10 ? 'foo' : 'bar');
        return expect(dict).to.be(map);
      });
      return dict.every(function(val, key, dict) {
        expect(val).to.be(key === 'name' ? 'Fred' : 4000);
        expect(key).to.be(val === 'Fred' ? 'name' : 'age');
        return expect(dict).to.be(dict);
      });
    });
    return it('should accept an optional context argument', function() {
      var obj;
      obj = {
        foo: 'bar'
      };
      map.every(obj, function(val, key) {
        return expect(this).to.be(obj);
      });
      return dict.every(obj, function(val, key) {
        return expect(this).to.be(obj);
      });
    });
  });
});
