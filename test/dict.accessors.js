// Generated by CoffeeScript 1.3.3
var Dict, Map, expect, _ref;

expect = require('expect.js');

_ref = require('../lib/coll'), Map = _ref.Map, Dict = _ref.Dict;

describe('Dict / Map Accessor Methods', function() {
  var dict, map;
  map = dict = null;
  beforeEach(function() {
    map = Map();
    map.set('foo', 10);
    map.set('bar', 33);
    return dict = Dict({
      name: 'Fred',
      age: 4000
    });
  });
  describe('#get', function() {
    return it('should get the value for the given key', function() {
      expect(map.get('foo')).to.be(10);
      expect(map.get('bar')).to.be(33);
      expect(dict.get('name')).to.be('Fred');
      return expect(dict.get('age')).to.be(4000);
    });
  });
  describe('#set', function() {
    it('should add a new key/value pair to the dictionary', function() {
      map.set('zzz', 21);
      expect(map.length).to.be(3);
      expect(map.get('zzz')).to.be(21);
      dict.set('kid', 'bambam');
      expect(dict.length).to.be(3);
      return expect(dict.get('kid')).to.be('bambam');
    });
    return it('should change the value of an existing key', function() {
      map.set('foo', 99);
      expect(map.length).to.be(2);
      expect(map.get('foo')).to.be(99);
      dict.set('name', 'Barney');
      expect(dict.length).to.be(2);
      return expect(dict.get('name')).to.be('Barney');
    });
  });
  describe('Map#set', function() {
    return it('should be able to use objects as keys', function() {
      var Foo, f1, f2, f3, m;
      Foo = (function() {

        function Foo() {}

        return Foo;

      })();
      f1 = new Foo;
      f2 = new Foo;
      f3 = new Foo;
      m = Map(Foo, 'String');
      m.set(f1, 'aaa');
      m.set(f2, 'bbb');
      m.set(f3, 'ccc');
      expect(m.get(f1)).to.be('aaa');
      expect(m.get(f2)).to.be('bbb');
      return expect(m.get(f3)).to.be('ccc');
    });
  });
  return describe('#hasKey', function() {
    it('should return `true` if the key exists', function() {
      var objkey;
      expect(map.hasKey('foo')).to.be(true);
      objkey = {
        yo: 'yo'
      };
      map.set(objkey, 'asdf');
      expect(map.hasKey(objkey)).to.be(true);
      return expect(dict.hasKey('age')).to.be["true"];
    });
    return it('should return `false` if the key does not exist', function() {
      var objkey;
      expect(map.hasKey('zzz')).to.be(false);
      objkey = {
        yo: 'yo'
      };
      expect(map.hasKey(objkey)).to.be(false);
      return expect(dict.hasKey('zoozoo')).to.be["false"];
    });
  });
});
