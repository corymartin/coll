// Generated by CoffeeScript 1.3.1
(function() {
  var List, TypedList, expect, _ref;

  expect = require('expect.js');

  _ref = require('../lib/coll'), TypedList = _ref.TypedList, List = _ref.List;

  describe('TypedList / List', function() {
    describe('Instance Properties', function() {
      describe('type', function() {
        var ls1, ls2;
        ls1 = ls2 = null;
        beforeEach(function() {
          ls1 = TypedList('String', ['a', 'b']);
          return ls2 = TypedList(RegExp);
        });
        it('is the type of the contents in the list', function() {
          expect(ls1.type).to.be('String');
          return expect(ls2.type).to.be(RegExp);
        });
        it('should not be writable if Object.defineProperty is available', function() {
          if (Object.defineProperty != null) {
            ls1.type = 'Number';
            ls2.type = Function;
            expect(ls1.type).to.be('String');
            return expect(ls2.type).to.be(RegExp);
          }
        });
        return it('should not be configurable if Object.defineProperty is available', function() {
          if (Object.defineProperty != null) {
            delete ls1.type;
            return expect(ls1).to.have.property('type');
          }
        });
      });
      return describe('length', function() {
        var ls;
        ls = null;
        beforeEach(function() {
          return ls = TypedList('String');
        });
        it('should have an initial value of zero', function() {
          return expect(ls.length).to.be(0);
        });
        return it('should not be configurable', function() {
          delete ls.length;
          return expect(ls).to.have.property('length');
        });
      });
    });
    return describe('Unmodified methods inherited directly from Array prototype', function() {
      expect(TypedList.prototype.pop).to.be.a(Function);
      expect(TypedList.prototype.reverse).to.be.a(Function);
      expect(TypedList.prototype.shift).to.be.a(Function);
      return expect(TypedList.prototype.join).to.be.a(Function);
    });
  });

}).call(this);
