// Generated by CoffeeScript 1.3.1
(function() {
  var List, TypedList, expect, _ref;

  expect = require('expect.js');

  _ref = require('../lib/coll'), TypedList = _ref.TypedList, List = _ref.List;

  describe('TypedList Constructor', function() {
    var ls1, ls2, ls3, ls4;
    ls1 = ls2 = ls3 = ls4 = null;
    beforeEach(function() {
      ls1 = new TypedList('String');
      ls2 = new TypedList('String', ['a', 'b']);
      ls3 = TypedList('Number');
      return ls4 = TypedList('Number', [1, 2]);
    });
    it('should instantiate a new instance with or without the use of `new`', function() {
      expect(ls1 instanceof TypedList).to.be(true);
      expect(ls2 instanceof TypedList).to.be(true);
      expect(ls3 instanceof TypedList).to.be(true);
      return expect(ls4 instanceof TypedList).to.be(true);
    });
    it('should inherit from `Array`', function() {
      expect(ls1 instanceof Array).to.be(true);
      expect(ls2 instanceof Array).to.be(true);
      expect(ls3 instanceof Array).to.be(true);
      return expect(ls4 instanceof Array).to.be(true);
    });
    it('should set the inital length of the list', function() {
      expect(ls1.length).to.be(0);
      expect(ls2.length).to.be(2);
      expect(ls3.length).to.be(0);
      return expect(ls4.length).to.be(2);
    });
    it('should require a type parameter', function() {
      expect(function() {
        return TypedList();
      }).to.throwError(function(e) {
        expect(e.message).to.be('Parameter `type` is required');
        return expect(e).to.be.a(TypeError);
      });
      expect(function() {
        return TypedList('String');
      }).not.to.throwError();
      return expect(function() {
        return TypedList(Array);
      }).not.to.throwError();
    });
    it('should populate itself with some initial values via the init param', function() {
      expect(ls2[0]).to.be('a');
      expect(ls2[1]).to.be('b');
      expect(ls4[0]).to.be(1);
      return expect(ls4[1]).to.be(2);
    });
    it('should accept an "iterable" for the init parameter', function() {
      var foo, ls;
      ls = TypedList('Number', [1, 2]);
      expect(ls.length).to.be(2);
      ls = TypedList('String', 'as');
      expect(ls.length).to.be(2);
      ls = TypedList('String', List('as'));
      expect(ls.length).to.be(2);
      foo = function() {
        ls = TypedList('String', arguments);
        return expect(ls.length).to.be(2);
      };
      return foo('a', 'b');
    });
    it('should type check the values it adds', function() {
      var Bar, Foo;
      expect(function() {
        return TypedList('String', ['a', 'b', 34]);
      }).to.throwError(/Expected String/);
      expect(function() {
        return TypedList('String', ['a', 'b', 'c']);
      }).not.to.throwError();
      expect(function() {
        return new TypedList('Number', [1, 'b', 3]);
      }).to.throwError(/Expected Number/);
      expect(function() {
        return new TypedList('Number', [1, 2, 3]);
      }).not.to.throwError();
      Foo = (function() {

        Foo.name = 'Foo';

        function Foo() {}

        return Foo;

      })();
      Bar = (function() {

        Bar.name = 'Bar';

        function Bar() {}

        return Bar;

      })();
      expect(function() {
        return TypedList(Foo, [new Foo, 34, new Foo]);
      }).to.throwError(/Expected Foo/);
      expect(function() {
        return TypedList(Foo, [new Foo, new Bar, new Foo]);
      }).to.throwError(/Expected Foo/);
      expect(function() {
        return TypedList(Foo, [new Foo, new Foo, new Foo]);
      }).not.to.throwError();
      expect(function() {
        return new TypedList(Foo, [new Foo, 34, new Foo]);
      }).to.throwError();
      expect(function() {
        return new TypedList(Foo, [new Foo, new Bar, new Foo]);
      }).to.throwError();
      return expect(function() {
        return new TypedList(Foo, [new Foo, new Foo, new Foo]);
      }).not.to.throwError();
    });
    return it('should accept a special type `Any` that allows any type of value', function() {
      expect(function() {
        return TypedList('Any', [34, 'a', new Date, true, /asdf/]);
      }).not.to.throwError();
      return expect(function() {
        return new TypedList('Any', [34, 'a', new Date, true, /asdf/]);
      }).not.to.throwError();
    });
  });

}).call(this);
