// Generated by CoffeeScript 1.3.3
var Dictionary, Map, expect, _ref;

expect = require('expect.js');

_ref = require('../lib/coll'), Map = _ref.Map, Dictionary = _ref.Dictionary;

describe('Map', function() {
  describe('constructor', function() {
    return it('should create a new instance with or without the `new` keyword', function() {
      var m1, m2;
      m1 = new Map('String', 'Number');
      m2 = Map('String', 'Number');
      expect(m1).to.be.a(Map);
      expect(m2).to.be.a(Map);
      return expect(m1).not.to.be(m2);
    });
  });
  return describe('instance properties', function() {
    return describe('Map', function() {
      var m;
      m = null;
      beforeEach(function() {
        return m = Map();
      });
      it('should have a `keys` property', function() {
        var key1, key2;
        key1 = /foo/;
        key2 = /bar/;
        m.set(key1, new Date);
        m.set(key2, new Date);
        expect(m.keys.length).to.be(2);
        expect(m.keys).to.contain(key1);
        return expect(m.keys).to.contain(key2);
      });
      it('should not allow the `keys` property to be modifed', function() {
        m.set(/foo/, new Date);
        m.set(/bar/, new Date);
        m.keys = [];
        expect(m.keys.length).to.be(2);
        m.keys.splice(0);
        return expect(m.keys.length).to.be(2);
      });
      return it('should have a length property', function() {
        m.set(/foo/, new Date);
        m.set(/bar/, new Date);
        return expect(m.length).to.be(2);
      });
    });
  });
});
