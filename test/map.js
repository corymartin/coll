// Generated by CoffeeScript 1.3.3
var Map, expect;

expect = require('expect.js');

Map = require('../lib/coll').coll.Map;

describe('Map', function() {
  describe('constructor', function() {
    it('should accept an optional array of tuples to initialize the Map', function() {
      var m;
      m = Map([['a', 2], ['b', 4]]);
      expect(m.get('a')).to.be(2);
      return expect(m.get('b')).to.be(4);
    });
    return it('should create a new instance with or without the `new` keyword', function() {
      var m1, m2;
      m1 = new Map('String', 'Number');
      m2 = Map('String', 'Number');
      expect(m1).to.be.a(Map);
      expect(m2).to.be.a(Map);
      return expect(m1).not.to.be(m2);
    });
  });
  return describe('instance properties', function() {
    var key1, key2, m;
    m = null;
    key1 = key2 = null;
    beforeEach(function() {
      m = Map();
      key1 = /foo/;
      key2 = /bar/;
      m.set(key1, new Date);
      return m.set(key2, new Date);
    });
    it('should have a `keys` property', function() {
      expect(m.keys.length).to.be(2);
      expect(m.keys).to.contain(key1);
      return expect(m.keys).to.contain(key2);
    });
    it('should have a `values` property', function() {
      expect(m.values.length).to.be(2);
      expect(m.values[0]).to.be.a(Date);
      return expect(m.values[1]).to.be.a(Date);
    });
    it('should not allow the `keys` property to be modifed', function() {
      m.keys = [];
      expect(m.keys.length).to.be(2);
      m.keys.splice(0);
      return expect(m.keys.length).to.be(2);
    });
    return it('should have a length property', function() {
      return expect(m.length).to.be(2);
    });
  });
});
